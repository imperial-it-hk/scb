package com.evp.bizlib.data.local.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evp.bizlib.data.entity.Acquirer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "acquirer".
*/
public class AcquirerDao extends AbstractDao<Acquirer, Long> {

    public static final String TABLENAME = "acquirer";

    /**
     * Properties of entity Acquirer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "acquirer_id");
        public final static Property Name = new Property(1, String.class, "name", false, "acquirer_name");
        public final static Property Nii = new Property(2, String.class, "nii", false, "NII");
        public final static Property TerminalId = new Property(3, String.class, "terminalId", false, "TERMINAL_ID");
        public final static Property MerchantId = new Property(4, String.class, "merchantId", false, "MERCHANT_ID");
        public final static Property CurrBatchNo = new Property(5, int.class, "currBatchNo", false, "CURR_BATCH_NO");
        public final static Property Ip = new Property(6, String.class, "ip", false, "IP");
        public final static Property Port = new Property(7, int.class, "port", false, "PORT");
        public final static Property IpBak1 = new Property(8, String.class, "ipBak1", false, "IP_BAK1");
        public final static Property PortBak1 = new Property(9, short.class, "portBak1", false, "PORT_BAK1");
        public final static Property IpBak2 = new Property(10, String.class, "ipBak2", false, "IP_BAK2");
        public final static Property PortBak2 = new Property(11, short.class, "portBak2", false, "PORT_BAK2");
        public final static Property TcpTimeOut = new Property(12, int.class, "tcpTimeOut", false, "TCP_TIME_OUT");
        public final static Property WirelessTimeOut = new Property(13, int.class, "wirelessTimeOut", false, "WIRELESS_TIME_OUT");
        public final static Property SslType = new Property(14, String.class, "sslType", false, "ssl_type");
        public final static Property TleEnabled = new Property(15, boolean.class, "tleEnabled", false, "TLE_ENABLED");
        public final static Property TleVersion = new Property(16, String.class, "tleVersion", false, "TLE_VERSION");
        public final static Property TleNii = new Property(17, String.class, "tleNii", false, "TLE_NII");
        public final static Property TleVendorId = new Property(18, String.class, "tleVendorId", false, "TLE_VENDOR_ID");
        public final static Property TleAcquirerId = new Property(19, String.class, "tleAcquirerId", false, "TLE_ACQUIRER_ID");
        public final static Property TleKeySetId = new Property(20, String.class, "tleKeySetId", false, "TLE_KEY_SET_ID");
        public final static Property TleTeId = new Property(21, String.class, "tleTeId", false, "TLE_TE_ID");
        public final static Property TleTePin = new Property(22, String.class, "tleTePin", false, "TLE_TE_PIN");
        public final static Property TleCurrentTmkId = new Property(23, byte[].class, "tleCurrentTmkId", false, "TLE_CURRENT_TMK_ID");
        public final static Property TleCurrentTwkId = new Property(24, byte[].class, "tleCurrentTwkId", false, "TLE_CURRENT_TWK_ID");
        public final static Property TleSensitiveFields = new Property(25, String.class, "tleSensitiveFields", false, "TLE_SENSITIVE_FIELDS");
        public final static Property TleKmsNii = new Property(26, String.class, "tleKmsNii", false, "TLE_KMS_NII");
        public final static Property DigioTmkKeyIndex = new Property(27, String.class, "digioTmkKeyIndex", false, "DIGIO_TMK_KEY_INDEX");
        public final static Property DigioTwkKeyIndex = new Property(28, String.class, "digioTwkKeyIndex", false, "DIGIO_TWK_KEY_INDEX");
        public final static Property AlipayTerminalId = new Property(29, String.class, "alipayTerminalId", false, "ALIPAY_TERMINAL_ID");
        public final static Property AlipayMerchantId = new Property(30, String.class, "alipayMerchantId", false, "ALIPAY_MERCHANT_ID");
        public final static Property AlipayAcquirer = new Property(31, String.class, "alipayAcquirer", false, "ALIPAY_ACQUIRER");
        public final static Property WechatTerminalId = new Property(32, String.class, "wechatTerminalId", false, "WECHAT_TERMINAL_ID");
        public final static Property WechatMerchantId = new Property(33, String.class, "wechatMerchantId", false, "WECHAT_MERCHANT_ID");
        public final static Property WechatAcquirer = new Property(34, String.class, "wechatAcquirer", false, "WECHAT_ACQUIRER");
        public final static Property Tag30TerminalId = new Property(35, String.class, "tag30TerminalId", false, "TAG30_TERMINAL_ID");
        public final static Property Tag30MerchantId = new Property(36, String.class, "tag30MerchantId", false, "TAG30_MERCHANT_ID");
        public final static Property Tag30BillerId = new Property(37, String.class, "tag30BillerId", false, "TAG30_BILLER_ID");
        public final static Property Tag30MerchantName = new Property(38, String.class, "tag30MerchantName", false, "TAG30_MERCHANT_NAME");
        public final static Property Tag30PartnerCode = new Property(39, String.class, "tag30PartnerCode", false, "TAG30_PARTNER_CODE");
        public final static Property Tag30Ref2 = new Property(40, String.class, "tag30Ref2", false, "TAG30_REF2");
        public final static Property QrcsTerminalId = new Property(41, String.class, "qrcsTerminalId", false, "QRCS_TERMINAL_ID");
        public final static Property QrcsMerchantId = new Property(42, String.class, "qrcsMerchantId", false, "QRCS_MERCHANT_ID");
        public final static Property QrcsPartnerCode = new Property(43, String.class, "qrcsPartnerCode", false, "QRCS_PARTNER_CODE");
        public final static Property InquiryTimeout = new Property(44, int.class, "inquiryTimeout", false, "INQUIRY_TIMEOUT");
        public final static Property InquiryRetries = new Property(45, int.class, "inquiryRetries", false, "INQUIRY_RETRIES");
        public final static Property ApiPublicKey = new Property(46, String.class, "apiPublicKey", false, "API_PUBLIC_KEY");
        public final static Property ApiUrl = new Property(47, String.class, "apiUrl", false, "API_URL");
        public final static Property HostTimeout = new Property(48, int.class, "hostTimeout", false, "HOST_TIMEOUT");
    }


    public AcquirerDao(DaoConfig config) {
        super(config);
    }
    
    public AcquirerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"acquirer\" (" + //
                "\"acquirer_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"acquirer_name\" TEXT UNIQUE ," + // 1: name
                "\"NII\" TEXT NOT NULL ," + // 2: nii
                "\"TERMINAL_ID\" TEXT NOT NULL ," + // 3: terminalId
                "\"MERCHANT_ID\" TEXT NOT NULL ," + // 4: merchantId
                "\"CURR_BATCH_NO\" INTEGER NOT NULL ," + // 5: currBatchNo
                "\"IP\" TEXT," + // 6: ip
                "\"PORT\" INTEGER NOT NULL ," + // 7: port
                "\"IP_BAK1\" TEXT," + // 8: ipBak1
                "\"PORT_BAK1\" INTEGER NOT NULL ," + // 9: portBak1
                "\"IP_BAK2\" TEXT," + // 10: ipBak2
                "\"PORT_BAK2\" INTEGER NOT NULL ," + // 11: portBak2
                "\"TCP_TIME_OUT\" INTEGER NOT NULL ," + // 12: tcpTimeOut
                "\"WIRELESS_TIME_OUT\" INTEGER NOT NULL ," + // 13: wirelessTimeOut
                "\"ssl_type\" TEXT," + // 14: sslType
                "\"TLE_ENABLED\" INTEGER NOT NULL ," + // 15: tleEnabled
                "\"TLE_VERSION\" TEXT," + // 16: tleVersion
                "\"TLE_NII\" TEXT," + // 17: tleNii
                "\"TLE_VENDOR_ID\" TEXT," + // 18: tleVendorId
                "\"TLE_ACQUIRER_ID\" TEXT," + // 19: tleAcquirerId
                "\"TLE_KEY_SET_ID\" TEXT," + // 20: tleKeySetId
                "\"TLE_TE_ID\" TEXT," + // 21: tleTeId
                "\"TLE_TE_PIN\" TEXT," + // 22: tleTePin
                "\"TLE_CURRENT_TMK_ID\" BLOB," + // 23: tleCurrentTmkId
                "\"TLE_CURRENT_TWK_ID\" BLOB," + // 24: tleCurrentTwkId
                "\"TLE_SENSITIVE_FIELDS\" TEXT," + // 25: tleSensitiveFields
                "\"TLE_KMS_NII\" TEXT," + // 26: tleKmsNii
                "\"DIGIO_TMK_KEY_INDEX\" TEXT," + // 27: digioTmkKeyIndex
                "\"DIGIO_TWK_KEY_INDEX\" TEXT," + // 28: digioTwkKeyIndex
                "\"ALIPAY_TERMINAL_ID\" TEXT," + // 29: alipayTerminalId
                "\"ALIPAY_MERCHANT_ID\" TEXT," + // 30: alipayMerchantId
                "\"ALIPAY_ACQUIRER\" TEXT," + // 31: alipayAcquirer
                "\"WECHAT_TERMINAL_ID\" TEXT," + // 32: wechatTerminalId
                "\"WECHAT_MERCHANT_ID\" TEXT," + // 33: wechatMerchantId
                "\"WECHAT_ACQUIRER\" TEXT," + // 34: wechatAcquirer
                "\"TAG30_TERMINAL_ID\" TEXT," + // 35: tag30TerminalId
                "\"TAG30_MERCHANT_ID\" TEXT," + // 36: tag30MerchantId
                "\"TAG30_BILLER_ID\" TEXT," + // 37: tag30BillerId
                "\"TAG30_MERCHANT_NAME\" TEXT," + // 38: tag30MerchantName
                "\"TAG30_PARTNER_CODE\" TEXT," + // 39: tag30PartnerCode
                "\"TAG30_REF2\" TEXT," + // 40: tag30Ref2
                "\"QRCS_TERMINAL_ID\" TEXT," + // 41: qrcsTerminalId
                "\"QRCS_MERCHANT_ID\" TEXT," + // 42: qrcsMerchantId
                "\"QRCS_PARTNER_CODE\" TEXT," + // 43: qrcsPartnerCode
                "\"INQUIRY_TIMEOUT\" INTEGER NOT NULL ," + // 44: inquiryTimeout
                "\"INQUIRY_RETRIES\" INTEGER NOT NULL ," + // 45: inquiryRetries
                "\"API_PUBLIC_KEY\" TEXT," + // 46: apiPublicKey
                "\"API_URL\" TEXT," + // 47: apiUrl
                "\"HOST_TIMEOUT\" INTEGER NOT NULL );"); // 48: hostTimeout
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"acquirer\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Acquirer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getNii());
        stmt.bindString(4, entity.getTerminalId());
        stmt.bindString(5, entity.getMerchantId());
        stmt.bindLong(6, entity.getCurrBatchNo());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(7, ip);
        }
        stmt.bindLong(8, entity.getPort());
 
        String ipBak1 = entity.getIpBak1();
        if (ipBak1 != null) {
            stmt.bindString(9, ipBak1);
        }
        stmt.bindLong(10, entity.getPortBak1());
 
        String ipBak2 = entity.getIpBak2();
        if (ipBak2 != null) {
            stmt.bindString(11, ipBak2);
        }
        stmt.bindLong(12, entity.getPortBak2());
        stmt.bindLong(13, entity.getTcpTimeOut());
        stmt.bindLong(14, entity.getWirelessTimeOut());
 
        String sslType = entity.getSslType();
        if (sslType != null) {
            stmt.bindString(15, sslType);
        }
        stmt.bindLong(16, entity.getTleEnabled() ? 1L: 0L);
 
        String tleVersion = entity.getTleVersion();
        if (tleVersion != null) {
            stmt.bindString(17, tleVersion);
        }
 
        String tleNii = entity.getTleNii();
        if (tleNii != null) {
            stmt.bindString(18, tleNii);
        }
 
        String tleVendorId = entity.getTleVendorId();
        if (tleVendorId != null) {
            stmt.bindString(19, tleVendorId);
        }
 
        String tleAcquirerId = entity.getTleAcquirerId();
        if (tleAcquirerId != null) {
            stmt.bindString(20, tleAcquirerId);
        }
 
        String tleKeySetId = entity.getTleKeySetId();
        if (tleKeySetId != null) {
            stmt.bindString(21, tleKeySetId);
        }
 
        String tleTeId = entity.getTleTeId();
        if (tleTeId != null) {
            stmt.bindString(22, tleTeId);
        }
 
        String tleTePin = entity.getTleTePin();
        if (tleTePin != null) {
            stmt.bindString(23, tleTePin);
        }
 
        byte[] tleCurrentTmkId = entity.getTleCurrentTmkId();
        if (tleCurrentTmkId != null) {
            stmt.bindBlob(24, tleCurrentTmkId);
        }
 
        byte[] tleCurrentTwkId = entity.getTleCurrentTwkId();
        if (tleCurrentTwkId != null) {
            stmt.bindBlob(25, tleCurrentTwkId);
        }
 
        String tleSensitiveFields = entity.getTleSensitiveFields();
        if (tleSensitiveFields != null) {
            stmt.bindString(26, tleSensitiveFields);
        }
 
        String tleKmsNii = entity.getTleKmsNii();
        if (tleKmsNii != null) {
            stmt.bindString(27, tleKmsNii);
        }
 
        String digioTmkKeyIndex = entity.getDigioTmkKeyIndex();
        if (digioTmkKeyIndex != null) {
            stmt.bindString(28, digioTmkKeyIndex);
        }
 
        String digioTwkKeyIndex = entity.getDigioTwkKeyIndex();
        if (digioTwkKeyIndex != null) {
            stmt.bindString(29, digioTwkKeyIndex);
        }
 
        String alipayTerminalId = entity.getAlipayTerminalId();
        if (alipayTerminalId != null) {
            stmt.bindString(30, alipayTerminalId);
        }
 
        String alipayMerchantId = entity.getAlipayMerchantId();
        if (alipayMerchantId != null) {
            stmt.bindString(31, alipayMerchantId);
        }
 
        String alipayAcquirer = entity.getAlipayAcquirer();
        if (alipayAcquirer != null) {
            stmt.bindString(32, alipayAcquirer);
        }
 
        String wechatTerminalId = entity.getWechatTerminalId();
        if (wechatTerminalId != null) {
            stmt.bindString(33, wechatTerminalId);
        }
 
        String wechatMerchantId = entity.getWechatMerchantId();
        if (wechatMerchantId != null) {
            stmt.bindString(34, wechatMerchantId);
        }
 
        String wechatAcquirer = entity.getWechatAcquirer();
        if (wechatAcquirer != null) {
            stmt.bindString(35, wechatAcquirer);
        }
 
        String tag30TerminalId = entity.getTag30TerminalId();
        if (tag30TerminalId != null) {
            stmt.bindString(36, tag30TerminalId);
        }
 
        String tag30MerchantId = entity.getTag30MerchantId();
        if (tag30MerchantId != null) {
            stmt.bindString(37, tag30MerchantId);
        }
 
        String tag30BillerId = entity.getTag30BillerId();
        if (tag30BillerId != null) {
            stmt.bindString(38, tag30BillerId);
        }
 
        String tag30MerchantName = entity.getTag30MerchantName();
        if (tag30MerchantName != null) {
            stmt.bindString(39, tag30MerchantName);
        }
 
        String tag30PartnerCode = entity.getTag30PartnerCode();
        if (tag30PartnerCode != null) {
            stmt.bindString(40, tag30PartnerCode);
        }
 
        String tag30Ref2 = entity.getTag30Ref2();
        if (tag30Ref2 != null) {
            stmt.bindString(41, tag30Ref2);
        }
 
        String qrcsTerminalId = entity.getQrcsTerminalId();
        if (qrcsTerminalId != null) {
            stmt.bindString(42, qrcsTerminalId);
        }
 
        String qrcsMerchantId = entity.getQrcsMerchantId();
        if (qrcsMerchantId != null) {
            stmt.bindString(43, qrcsMerchantId);
        }
 
        String qrcsPartnerCode = entity.getQrcsPartnerCode();
        if (qrcsPartnerCode != null) {
            stmt.bindString(44, qrcsPartnerCode);
        }
        stmt.bindLong(45, entity.getInquiryTimeout());
        stmt.bindLong(46, entity.getInquiryRetries());
 
        String apiPublicKey = entity.getApiPublicKey();
        if (apiPublicKey != null) {
            stmt.bindString(47, apiPublicKey);
        }
 
        String apiUrl = entity.getApiUrl();
        if (apiUrl != null) {
            stmt.bindString(48, apiUrl);
        }
        stmt.bindLong(49, entity.getHostTimeout());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Acquirer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getNii());
        stmt.bindString(4, entity.getTerminalId());
        stmt.bindString(5, entity.getMerchantId());
        stmt.bindLong(6, entity.getCurrBatchNo());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(7, ip);
        }
        stmt.bindLong(8, entity.getPort());
 
        String ipBak1 = entity.getIpBak1();
        if (ipBak1 != null) {
            stmt.bindString(9, ipBak1);
        }
        stmt.bindLong(10, entity.getPortBak1());
 
        String ipBak2 = entity.getIpBak2();
        if (ipBak2 != null) {
            stmt.bindString(11, ipBak2);
        }
        stmt.bindLong(12, entity.getPortBak2());
        stmt.bindLong(13, entity.getTcpTimeOut());
        stmt.bindLong(14, entity.getWirelessTimeOut());
 
        String sslType = entity.getSslType();
        if (sslType != null) {
            stmt.bindString(15, sslType);
        }
        stmt.bindLong(16, entity.getTleEnabled() ? 1L: 0L);
 
        String tleVersion = entity.getTleVersion();
        if (tleVersion != null) {
            stmt.bindString(17, tleVersion);
        }
 
        String tleNii = entity.getTleNii();
        if (tleNii != null) {
            stmt.bindString(18, tleNii);
        }
 
        String tleVendorId = entity.getTleVendorId();
        if (tleVendorId != null) {
            stmt.bindString(19, tleVendorId);
        }
 
        String tleAcquirerId = entity.getTleAcquirerId();
        if (tleAcquirerId != null) {
            stmt.bindString(20, tleAcquirerId);
        }
 
        String tleKeySetId = entity.getTleKeySetId();
        if (tleKeySetId != null) {
            stmt.bindString(21, tleKeySetId);
        }
 
        String tleTeId = entity.getTleTeId();
        if (tleTeId != null) {
            stmt.bindString(22, tleTeId);
        }
 
        String tleTePin = entity.getTleTePin();
        if (tleTePin != null) {
            stmt.bindString(23, tleTePin);
        }
 
        byte[] tleCurrentTmkId = entity.getTleCurrentTmkId();
        if (tleCurrentTmkId != null) {
            stmt.bindBlob(24, tleCurrentTmkId);
        }
 
        byte[] tleCurrentTwkId = entity.getTleCurrentTwkId();
        if (tleCurrentTwkId != null) {
            stmt.bindBlob(25, tleCurrentTwkId);
        }
 
        String tleSensitiveFields = entity.getTleSensitiveFields();
        if (tleSensitiveFields != null) {
            stmt.bindString(26, tleSensitiveFields);
        }
 
        String tleKmsNii = entity.getTleKmsNii();
        if (tleKmsNii != null) {
            stmt.bindString(27, tleKmsNii);
        }
 
        String digioTmkKeyIndex = entity.getDigioTmkKeyIndex();
        if (digioTmkKeyIndex != null) {
            stmt.bindString(28, digioTmkKeyIndex);
        }
 
        String digioTwkKeyIndex = entity.getDigioTwkKeyIndex();
        if (digioTwkKeyIndex != null) {
            stmt.bindString(29, digioTwkKeyIndex);
        }
 
        String alipayTerminalId = entity.getAlipayTerminalId();
        if (alipayTerminalId != null) {
            stmt.bindString(30, alipayTerminalId);
        }
 
        String alipayMerchantId = entity.getAlipayMerchantId();
        if (alipayMerchantId != null) {
            stmt.bindString(31, alipayMerchantId);
        }
 
        String alipayAcquirer = entity.getAlipayAcquirer();
        if (alipayAcquirer != null) {
            stmt.bindString(32, alipayAcquirer);
        }
 
        String wechatTerminalId = entity.getWechatTerminalId();
        if (wechatTerminalId != null) {
            stmt.bindString(33, wechatTerminalId);
        }
 
        String wechatMerchantId = entity.getWechatMerchantId();
        if (wechatMerchantId != null) {
            stmt.bindString(34, wechatMerchantId);
        }
 
        String wechatAcquirer = entity.getWechatAcquirer();
        if (wechatAcquirer != null) {
            stmt.bindString(35, wechatAcquirer);
        }
 
        String tag30TerminalId = entity.getTag30TerminalId();
        if (tag30TerminalId != null) {
            stmt.bindString(36, tag30TerminalId);
        }
 
        String tag30MerchantId = entity.getTag30MerchantId();
        if (tag30MerchantId != null) {
            stmt.bindString(37, tag30MerchantId);
        }
 
        String tag30BillerId = entity.getTag30BillerId();
        if (tag30BillerId != null) {
            stmt.bindString(38, tag30BillerId);
        }
 
        String tag30MerchantName = entity.getTag30MerchantName();
        if (tag30MerchantName != null) {
            stmt.bindString(39, tag30MerchantName);
        }
 
        String tag30PartnerCode = entity.getTag30PartnerCode();
        if (tag30PartnerCode != null) {
            stmt.bindString(40, tag30PartnerCode);
        }
 
        String tag30Ref2 = entity.getTag30Ref2();
        if (tag30Ref2 != null) {
            stmt.bindString(41, tag30Ref2);
        }
 
        String qrcsTerminalId = entity.getQrcsTerminalId();
        if (qrcsTerminalId != null) {
            stmt.bindString(42, qrcsTerminalId);
        }
 
        String qrcsMerchantId = entity.getQrcsMerchantId();
        if (qrcsMerchantId != null) {
            stmt.bindString(43, qrcsMerchantId);
        }
 
        String qrcsPartnerCode = entity.getQrcsPartnerCode();
        if (qrcsPartnerCode != null) {
            stmt.bindString(44, qrcsPartnerCode);
        }
        stmt.bindLong(45, entity.getInquiryTimeout());
        stmt.bindLong(46, entity.getInquiryRetries());
 
        String apiPublicKey = entity.getApiPublicKey();
        if (apiPublicKey != null) {
            stmt.bindString(47, apiPublicKey);
        }
 
        String apiUrl = entity.getApiUrl();
        if (apiUrl != null) {
            stmt.bindString(48, apiUrl);
        }
        stmt.bindLong(49, entity.getHostTimeout());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Acquirer readEntity(Cursor cursor, int offset) {
        Acquirer entity = new Acquirer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // nii
            cursor.getString(offset + 3), // terminalId
            cursor.getString(offset + 4), // merchantId
            cursor.getInt(offset + 5), // currBatchNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ip
            cursor.getInt(offset + 7), // port
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ipBak1
            cursor.getShort(offset + 9), // portBak1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ipBak2
            cursor.getShort(offset + 11), // portBak2
            cursor.getInt(offset + 12), // tcpTimeOut
            cursor.getInt(offset + 13), // wirelessTimeOut
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sslType
            cursor.getShort(offset + 15) != 0, // tleEnabled
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tleVersion
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // tleNii
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tleVendorId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // tleAcquirerId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tleKeySetId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // tleTeId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tleTePin
            cursor.isNull(offset + 23) ? null : cursor.getBlob(offset + 23), // tleCurrentTmkId
            cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24), // tleCurrentTwkId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tleSensitiveFields
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // tleKmsNii
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // digioTmkKeyIndex
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // digioTwkKeyIndex
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // alipayTerminalId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // alipayMerchantId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // alipayAcquirer
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // wechatTerminalId
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // wechatMerchantId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // wechatAcquirer
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // tag30TerminalId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // tag30MerchantId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // tag30BillerId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // tag30MerchantName
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // tag30PartnerCode
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // tag30Ref2
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // qrcsTerminalId
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // qrcsMerchantId
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // qrcsPartnerCode
            cursor.getInt(offset + 44), // inquiryTimeout
            cursor.getInt(offset + 45), // inquiryRetries
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // apiPublicKey
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // apiUrl
            cursor.getInt(offset + 48) // hostTimeout
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Acquirer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNii(cursor.getString(offset + 2));
        entity.setTerminalId(cursor.getString(offset + 3));
        entity.setMerchantId(cursor.getString(offset + 4));
        entity.setCurrBatchNo(cursor.getInt(offset + 5));
        entity.setIp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPort(cursor.getInt(offset + 7));
        entity.setIpBak1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPortBak1(cursor.getShort(offset + 9));
        entity.setIpBak2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPortBak2(cursor.getShort(offset + 11));
        entity.setTcpTimeOut(cursor.getInt(offset + 12));
        entity.setWirelessTimeOut(cursor.getInt(offset + 13));
        entity.setSslType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTleEnabled(cursor.getShort(offset + 15) != 0);
        entity.setTleVersion(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTleNii(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTleVendorId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTleAcquirerId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTleKeySetId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTleTeId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTleTePin(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTleCurrentTmkId(cursor.isNull(offset + 23) ? null : cursor.getBlob(offset + 23));
        entity.setTleCurrentTwkId(cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24));
        entity.setTleSensitiveFields(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTleKmsNii(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDigioTmkKeyIndex(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDigioTwkKeyIndex(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAlipayTerminalId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAlipayMerchantId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAlipayAcquirer(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setWechatTerminalId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setWechatMerchantId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setWechatAcquirer(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTag30TerminalId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTag30MerchantId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTag30BillerId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTag30MerchantName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setTag30PartnerCode(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setTag30Ref2(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setQrcsTerminalId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setQrcsMerchantId(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setQrcsPartnerCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setInquiryTimeout(cursor.getInt(offset + 44));
        entity.setInquiryRetries(cursor.getInt(offset + 45));
        entity.setApiPublicKey(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setApiUrl(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setHostTimeout(cursor.getInt(offset + 48));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Acquirer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Acquirer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Acquirer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
