package com.evp.bizlib.data.local.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evp.bizlib.data.entity.Acquirer;

import com.evp.bizlib.data.entity.TransTotal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "trans_total".
*/
public class TransTotalDao extends AbstractDao<TransTotal, Long> {

    public static final String TABLENAME = "trans_total";

    /**
     * Properties of entity TransTotal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property MerchantID = new Property(1, String.class, "merchantID", false, "mid");
        public final static Property TerminalID = new Property(2, String.class, "terminalID", false, "tid");
        public final static Property BatchNo = new Property(3, int.class, "batchNo", false, "batch_no");
        public final static Property DateTime = new Property(4, String.class, "dateTime", false, "batch_time");
        public final static Property Acquirer_id = new Property(5, long.class, "acquirer_id", false, "ACQUIRER_ID");
        public final static Property IsClosed = new Property(6, boolean.class, "isClosed", false, "closed");
        public final static Property SaleTotalAmt = new Property(7, long.class, "saleTotalAmt", false, "SALE_AMOUNT");
        public final static Property SaleTotalNum = new Property(8, long.class, "saleTotalNum", false, "SALE_NUM");
        public final static Property VoidTotalAmt = new Property(9, long.class, "voidTotalAmt", false, "VOID_AMOUNT");
        public final static Property VoidTotalNum = new Property(10, long.class, "voidTotalNum", false, "VOID_NUM");
        public final static Property RefundTotalAmt = new Property(11, long.class, "refundTotalAmt", false, "REFUND_AMOUNT");
        public final static Property RefundTotalNum = new Property(12, long.class, "refundTotalNum", false, "REFUND_NUM");
        public final static Property RefundVoidTotalAmt = new Property(13, long.class, "refundVoidTotalAmt", false, "REFUND_VOID_AMOUNT");
        public final static Property RefundVoidTotalNum = new Property(14, long.class, "refundVoidTotalNum", false, "REFUND_VOID_NUM");
        public final static Property SaleVoidTotalAmt = new Property(15, long.class, "saleVoidTotalAmt", false, "SALE_VOID_AMOUNT");
        public final static Property SaleVoidTotalNum = new Property(16, long.class, "saleVoidTotalNum", false, "SALE_VOID_NUM");
        public final static Property AuthTotalAmt = new Property(17, long.class, "authTotalAmt", false, "AUTH_AMOUNT");
        public final static Property AuthTotalNum = new Property(18, long.class, "authTotalNum", false, "AUTH_NUM");
        public final static Property OfflineTotalAmt = new Property(19, long.class, "offlineTotalAmt", false, "OFFLINE_AMOUNT");
        public final static Property OfflineTotalNum = new Property(20, long.class, "offlineTotalNum", false, "OFFLINE_NUM");
        public final static Property ClubPoolId = new Property(21, String.class, "clubPoolId", false, "CLUB_POOL_ID");
        public final static Property RedeemTotalAmt = new Property(22, long.class, "redeemTotalAmt", false, "REDEEM_TOTAL_AMT");
        public final static Property RedeemTotalNum = new Property(23, long.class, "redeemTotalNum", false, "REDEEM_TOTAL_NUM");
        public final static Property RedeemVoucherAmt = new Property(24, long.class, "redeemVoucherAmt", false, "REDEEM_VOUCHER_AMT");
        public final static Property RedeemVoucherPts = new Property(25, long.class, "redeemVoucherPts", false, "REDEEM_VOUCHER_PTS");
        public final static Property RedeemVoucherNum = new Property(26, long.class, "redeemVoucherNum", false, "REDEEM_VOUCHER_NUM");
        public final static Property RedeemPointAmt = new Property(27, long.class, "redeemPointAmt", false, "REDEEM_POINT_AMT");
        public final static Property RedeemPointPts = new Property(28, long.class, "redeemPointPts", false, "REDEEM_POINT_PTS");
        public final static Property RedeemPointNum = new Property(29, long.class, "redeemPointNum", false, "REDEEM_POINT_NUM");
        public final static Property RedeemDiscountAmt = new Property(30, long.class, "redeemDiscountAmt", false, "REDEEM_DISCOUNT_AMT");
        public final static Property RedeemDiscountPts = new Property(31, long.class, "redeemDiscountPts", false, "REDEEM_DISCOUNT_PTS");
        public final static Property RedeemDiscountNum = new Property(32, long.class, "redeemDiscountNum", false, "REDEEM_DISCOUNT_NUM");
        public final static Property RedeemProductAmt = new Property(33, long.class, "redeemProductAmt", false, "REDEEM_PRODUCT_AMT");
        public final static Property RedeemProductPts = new Property(34, long.class, "redeemProductPts", false, "REDEEM_PRODUCT_PTS");
        public final static Property RedeemProductNum = new Property(35, long.class, "redeemProductNum", false, "REDEEM_PRODUCT_NUM");
        public final static Property QrsAlipaySaleTotalAmt = new Property(36, long.class, "qrsAlipaySaleTotalAmt", false, "QRS_ALIPAY_SALE_TOTAL_AMT");
        public final static Property QrsAlipaySaleTotalNum = new Property(37, long.class, "qrsAlipaySaleTotalNum", false, "QRS_ALIPAY_SALE_TOTAL_NUM");
        public final static Property QrsWechatSaleTotalAmt = new Property(38, long.class, "qrsWechatSaleTotalAmt", false, "QRS_WECHAT_SALE_TOTAL_AMT");
        public final static Property QrsWechatSaleTotalNum = new Property(39, long.class, "qrsWechatSaleTotalNum", false, "QRS_WECHAT_SALE_TOTAL_NUM");
        public final static Property QrsTag30SaleTotalAmt = new Property(40, long.class, "qrsTag30SaleTotalAmt", false, "QRS_TAG30_SALE_TOTAL_AMT");
        public final static Property QrsTag30SaleTotalNum = new Property(41, long.class, "qrsTag30SaleTotalNum", false, "QRS_TAG30_SALE_TOTAL_NUM");
        public final static Property QrsQrcsVisaSaleTotalAmt = new Property(42, long.class, "qrsQrcsVisaSaleTotalAmt", false, "QRS_QRCS_VISA_SALE_TOTAL_AMT");
        public final static Property QrsQrcsVisaSaleTotalNum = new Property(43, long.class, "qrsQrcsVisaSaleTotalNum", false, "QRS_QRCS_VISA_SALE_TOTAL_NUM");
        public final static Property QrsQrcsMasterSaleTotalAmt = new Property(44, long.class, "qrsQrcsMasterSaleTotalAmt", false, "QRS_QRCS_MASTER_SALE_TOTAL_AMT");
        public final static Property QrsQrcsMasterSaleTotalNum = new Property(45, long.class, "qrsQrcsMasterSaleTotalNum", false, "QRS_QRCS_MASTER_SALE_TOTAL_NUM");
        public final static Property QrsQrcsUpiSaleTotalAmt = new Property(46, long.class, "qrsQrcsUpiSaleTotalAmt", false, "QRS_QRCS_UPI_SALE_TOTAL_AMT");
        public final static Property QrsQrcsUpiSaleTotalNum = new Property(47, long.class, "qrsQrcsUpiSaleTotalNum", false, "QRS_QRCS_UPI_SALE_TOTAL_NUM");
        public final static Property QrsAlipayRefundTotalAmt = new Property(48, long.class, "qrsAlipayRefundTotalAmt", false, "QRS_ALIPAY_REFUND_TOTAL_AMT");
        public final static Property QrsAlipayRefundTotalNum = new Property(49, long.class, "qrsAlipayRefundTotalNum", false, "QRS_ALIPAY_REFUND_TOTAL_NUM");
        public final static Property QrsWechatRefundTotalAmt = new Property(50, long.class, "qrsWechatRefundTotalAmt", false, "QRS_WECHAT_REFUND_TOTAL_AMT");
        public final static Property QrsWechatRefundTotalNum = new Property(51, long.class, "qrsWechatRefundTotalNum", false, "QRS_WECHAT_REFUND_TOTAL_NUM");
        public final static Property QrsTag30RefundTotalAmt = new Property(52, long.class, "qrsTag30RefundTotalAmt", false, "QRS_TAG30_REFUND_TOTAL_AMT");
        public final static Property QrsTag30RefundTotalNum = new Property(53, long.class, "qrsTag30RefundTotalNum", false, "QRS_TAG30_REFUND_TOTAL_NUM");
        public final static Property QrsQrcsVisaRefundTotalAmt = new Property(54, long.class, "qrsQrcsVisaRefundTotalAmt", false, "QRS_QRCS_VISA_REFUND_TOTAL_AMT");
        public final static Property QrsQrcsVisaRefundTotalNum = new Property(55, long.class, "qrsQrcsVisaRefundTotalNum", false, "QRS_QRCS_VISA_REFUND_TOTAL_NUM");
        public final static Property QrsQrcsMasterRefundTotalAmt = new Property(56, long.class, "qrsQrcsMasterRefundTotalAmt", false, "QRS_QRCS_MASTER_REFUND_TOTAL_AMT");
        public final static Property QrsQrcsMasterRefundTotalNum = new Property(57, long.class, "qrsQrcsMasterRefundTotalNum", false, "QRS_QRCS_MASTER_REFUND_TOTAL_NUM");
        public final static Property QrsQrcsUpiRefundTotalAmt = new Property(58, long.class, "qrsQrcsUpiRefundTotalAmt", false, "QRS_QRCS_UPI_REFUND_TOTAL_AMT");
        public final static Property QrsQrcsUpiRefundTotalNum = new Property(59, long.class, "qrsQrcsUpiRefundTotalNum", false, "QRS_QRCS_UPI_REFUND_TOTAL_NUM");
    }

    private DaoSession daoSession;


    public TransTotalDao(DaoConfig config) {
        super(config);
    }
    
    public TransTotalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"trans_total\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"mid\" TEXT," + // 1: merchantID
                "\"tid\" TEXT," + // 2: terminalID
                "\"batch_no\" INTEGER NOT NULL ," + // 3: batchNo
                "\"batch_time\" TEXT," + // 4: dateTime
                "\"ACQUIRER_ID\" INTEGER NOT NULL ," + // 5: acquirer_id
                "\"closed\" INTEGER NOT NULL ," + // 6: isClosed
                "\"SALE_AMOUNT\" INTEGER NOT NULL ," + // 7: saleTotalAmt
                "\"SALE_NUM\" INTEGER NOT NULL ," + // 8: saleTotalNum
                "\"VOID_AMOUNT\" INTEGER NOT NULL ," + // 9: voidTotalAmt
                "\"VOID_NUM\" INTEGER NOT NULL ," + // 10: voidTotalNum
                "\"REFUND_AMOUNT\" INTEGER NOT NULL ," + // 11: refundTotalAmt
                "\"REFUND_NUM\" INTEGER NOT NULL ," + // 12: refundTotalNum
                "\"REFUND_VOID_AMOUNT\" INTEGER NOT NULL ," + // 13: refundVoidTotalAmt
                "\"REFUND_VOID_NUM\" INTEGER NOT NULL ," + // 14: refundVoidTotalNum
                "\"SALE_VOID_AMOUNT\" INTEGER NOT NULL ," + // 15: saleVoidTotalAmt
                "\"SALE_VOID_NUM\" INTEGER NOT NULL ," + // 16: saleVoidTotalNum
                "\"AUTH_AMOUNT\" INTEGER NOT NULL ," + // 17: authTotalAmt
                "\"AUTH_NUM\" INTEGER NOT NULL ," + // 18: authTotalNum
                "\"OFFLINE_AMOUNT\" INTEGER NOT NULL ," + // 19: offlineTotalAmt
                "\"OFFLINE_NUM\" INTEGER NOT NULL ," + // 20: offlineTotalNum
                "\"CLUB_POOL_ID\" TEXT," + // 21: clubPoolId
                "\"REDEEM_TOTAL_AMT\" INTEGER NOT NULL ," + // 22: redeemTotalAmt
                "\"REDEEM_TOTAL_NUM\" INTEGER NOT NULL ," + // 23: redeemTotalNum
                "\"REDEEM_VOUCHER_AMT\" INTEGER NOT NULL ," + // 24: redeemVoucherAmt
                "\"REDEEM_VOUCHER_PTS\" INTEGER NOT NULL ," + // 25: redeemVoucherPts
                "\"REDEEM_VOUCHER_NUM\" INTEGER NOT NULL ," + // 26: redeemVoucherNum
                "\"REDEEM_POINT_AMT\" INTEGER NOT NULL ," + // 27: redeemPointAmt
                "\"REDEEM_POINT_PTS\" INTEGER NOT NULL ," + // 28: redeemPointPts
                "\"REDEEM_POINT_NUM\" INTEGER NOT NULL ," + // 29: redeemPointNum
                "\"REDEEM_DISCOUNT_AMT\" INTEGER NOT NULL ," + // 30: redeemDiscountAmt
                "\"REDEEM_DISCOUNT_PTS\" INTEGER NOT NULL ," + // 31: redeemDiscountPts
                "\"REDEEM_DISCOUNT_NUM\" INTEGER NOT NULL ," + // 32: redeemDiscountNum
                "\"REDEEM_PRODUCT_AMT\" INTEGER NOT NULL ," + // 33: redeemProductAmt
                "\"REDEEM_PRODUCT_PTS\" INTEGER NOT NULL ," + // 34: redeemProductPts
                "\"REDEEM_PRODUCT_NUM\" INTEGER NOT NULL ," + // 35: redeemProductNum
                "\"QRS_ALIPAY_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 36: qrsAlipaySaleTotalAmt
                "\"QRS_ALIPAY_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 37: qrsAlipaySaleTotalNum
                "\"QRS_WECHAT_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 38: qrsWechatSaleTotalAmt
                "\"QRS_WECHAT_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 39: qrsWechatSaleTotalNum
                "\"QRS_TAG30_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 40: qrsTag30SaleTotalAmt
                "\"QRS_TAG30_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 41: qrsTag30SaleTotalNum
                "\"QRS_QRCS_VISA_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 42: qrsQrcsVisaSaleTotalAmt
                "\"QRS_QRCS_VISA_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 43: qrsQrcsVisaSaleTotalNum
                "\"QRS_QRCS_MASTER_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 44: qrsQrcsMasterSaleTotalAmt
                "\"QRS_QRCS_MASTER_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 45: qrsQrcsMasterSaleTotalNum
                "\"QRS_QRCS_UPI_SALE_TOTAL_AMT\" INTEGER NOT NULL ," + // 46: qrsQrcsUpiSaleTotalAmt
                "\"QRS_QRCS_UPI_SALE_TOTAL_NUM\" INTEGER NOT NULL ," + // 47: qrsQrcsUpiSaleTotalNum
                "\"QRS_ALIPAY_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 48: qrsAlipayRefundTotalAmt
                "\"QRS_ALIPAY_REFUND_TOTAL_NUM\" INTEGER NOT NULL ," + // 49: qrsAlipayRefundTotalNum
                "\"QRS_WECHAT_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 50: qrsWechatRefundTotalAmt
                "\"QRS_WECHAT_REFUND_TOTAL_NUM\" INTEGER NOT NULL ," + // 51: qrsWechatRefundTotalNum
                "\"QRS_TAG30_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 52: qrsTag30RefundTotalAmt
                "\"QRS_TAG30_REFUND_TOTAL_NUM\" INTEGER NOT NULL ," + // 53: qrsTag30RefundTotalNum
                "\"QRS_QRCS_VISA_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 54: qrsQrcsVisaRefundTotalAmt
                "\"QRS_QRCS_VISA_REFUND_TOTAL_NUM\" INTEGER NOT NULL ," + // 55: qrsQrcsVisaRefundTotalNum
                "\"QRS_QRCS_MASTER_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 56: qrsQrcsMasterRefundTotalAmt
                "\"QRS_QRCS_MASTER_REFUND_TOTAL_NUM\" INTEGER NOT NULL ," + // 57: qrsQrcsMasterRefundTotalNum
                "\"QRS_QRCS_UPI_REFUND_TOTAL_AMT\" INTEGER NOT NULL ," + // 58: qrsQrcsUpiRefundTotalAmt
                "\"QRS_QRCS_UPI_REFUND_TOTAL_NUM\" INTEGER NOT NULL );"); // 59: qrsQrcsUpiRefundTotalNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"trans_total\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransTotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String merchantID = entity.getMerchantID();
        if (merchantID != null) {
            stmt.bindString(2, merchantID);
        }
 
        String terminalID = entity.getTerminalID();
        if (terminalID != null) {
            stmt.bindString(3, terminalID);
        }
        stmt.bindLong(4, entity.getBatchNo());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(5, dateTime);
        }
        stmt.bindLong(6, entity.getAcquirer_id());
        stmt.bindLong(7, entity.getIsClosed() ? 1L: 0L);
        stmt.bindLong(8, entity.getSaleTotalAmt());
        stmt.bindLong(9, entity.getSaleTotalNum());
        stmt.bindLong(10, entity.getVoidTotalAmt());
        stmt.bindLong(11, entity.getVoidTotalNum());
        stmt.bindLong(12, entity.getRefundTotalAmt());
        stmt.bindLong(13, entity.getRefundTotalNum());
        stmt.bindLong(14, entity.getRefundVoidTotalAmt());
        stmt.bindLong(15, entity.getRefundVoidTotalNum());
        stmt.bindLong(16, entity.getSaleVoidTotalAmt());
        stmt.bindLong(17, entity.getSaleVoidTotalNum());
        stmt.bindLong(18, entity.getAuthTotalAmt());
        stmt.bindLong(19, entity.getAuthTotalNum());
        stmt.bindLong(20, entity.getOfflineTotalAmt());
        stmt.bindLong(21, entity.getOfflineTotalNum());
 
        String clubPoolId = entity.getClubPoolId();
        if (clubPoolId != null) {
            stmt.bindString(22, clubPoolId);
        }
        stmt.bindLong(23, entity.getRedeemTotalAmt());
        stmt.bindLong(24, entity.getRedeemTotalNum());
        stmt.bindLong(25, entity.getRedeemVoucherAmt());
        stmt.bindLong(26, entity.getRedeemVoucherPts());
        stmt.bindLong(27, entity.getRedeemVoucherNum());
        stmt.bindLong(28, entity.getRedeemPointAmt());
        stmt.bindLong(29, entity.getRedeemPointPts());
        stmt.bindLong(30, entity.getRedeemPointNum());
        stmt.bindLong(31, entity.getRedeemDiscountAmt());
        stmt.bindLong(32, entity.getRedeemDiscountPts());
        stmt.bindLong(33, entity.getRedeemDiscountNum());
        stmt.bindLong(34, entity.getRedeemProductAmt());
        stmt.bindLong(35, entity.getRedeemProductPts());
        stmt.bindLong(36, entity.getRedeemProductNum());
        stmt.bindLong(37, entity.getQrsAlipaySaleTotalAmt());
        stmt.bindLong(38, entity.getQrsAlipaySaleTotalNum());
        stmt.bindLong(39, entity.getQrsWechatSaleTotalAmt());
        stmt.bindLong(40, entity.getQrsWechatSaleTotalNum());
        stmt.bindLong(41, entity.getQrsTag30SaleTotalAmt());
        stmt.bindLong(42, entity.getQrsTag30SaleTotalNum());
        stmt.bindLong(43, entity.getQrsQrcsVisaSaleTotalAmt());
        stmt.bindLong(44, entity.getQrsQrcsVisaSaleTotalNum());
        stmt.bindLong(45, entity.getQrsQrcsMasterSaleTotalAmt());
        stmt.bindLong(46, entity.getQrsQrcsMasterSaleTotalNum());
        stmt.bindLong(47, entity.getQrsQrcsUpiSaleTotalAmt());
        stmt.bindLong(48, entity.getQrsQrcsUpiSaleTotalNum());
        stmt.bindLong(49, entity.getQrsAlipayRefundTotalAmt());
        stmt.bindLong(50, entity.getQrsAlipayRefundTotalNum());
        stmt.bindLong(51, entity.getQrsWechatRefundTotalAmt());
        stmt.bindLong(52, entity.getQrsWechatRefundTotalNum());
        stmt.bindLong(53, entity.getQrsTag30RefundTotalAmt());
        stmt.bindLong(54, entity.getQrsTag30RefundTotalNum());
        stmt.bindLong(55, entity.getQrsQrcsVisaRefundTotalAmt());
        stmt.bindLong(56, entity.getQrsQrcsVisaRefundTotalNum());
        stmt.bindLong(57, entity.getQrsQrcsMasterRefundTotalAmt());
        stmt.bindLong(58, entity.getQrsQrcsMasterRefundTotalNum());
        stmt.bindLong(59, entity.getQrsQrcsUpiRefundTotalAmt());
        stmt.bindLong(60, entity.getQrsQrcsUpiRefundTotalNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransTotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String merchantID = entity.getMerchantID();
        if (merchantID != null) {
            stmt.bindString(2, merchantID);
        }
 
        String terminalID = entity.getTerminalID();
        if (terminalID != null) {
            stmt.bindString(3, terminalID);
        }
        stmt.bindLong(4, entity.getBatchNo());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(5, dateTime);
        }
        stmt.bindLong(6, entity.getAcquirer_id());
        stmt.bindLong(7, entity.getIsClosed() ? 1L: 0L);
        stmt.bindLong(8, entity.getSaleTotalAmt());
        stmt.bindLong(9, entity.getSaleTotalNum());
        stmt.bindLong(10, entity.getVoidTotalAmt());
        stmt.bindLong(11, entity.getVoidTotalNum());
        stmt.bindLong(12, entity.getRefundTotalAmt());
        stmt.bindLong(13, entity.getRefundTotalNum());
        stmt.bindLong(14, entity.getRefundVoidTotalAmt());
        stmt.bindLong(15, entity.getRefundVoidTotalNum());
        stmt.bindLong(16, entity.getSaleVoidTotalAmt());
        stmt.bindLong(17, entity.getSaleVoidTotalNum());
        stmt.bindLong(18, entity.getAuthTotalAmt());
        stmt.bindLong(19, entity.getAuthTotalNum());
        stmt.bindLong(20, entity.getOfflineTotalAmt());
        stmt.bindLong(21, entity.getOfflineTotalNum());
 
        String clubPoolId = entity.getClubPoolId();
        if (clubPoolId != null) {
            stmt.bindString(22, clubPoolId);
        }
        stmt.bindLong(23, entity.getRedeemTotalAmt());
        stmt.bindLong(24, entity.getRedeemTotalNum());
        stmt.bindLong(25, entity.getRedeemVoucherAmt());
        stmt.bindLong(26, entity.getRedeemVoucherPts());
        stmt.bindLong(27, entity.getRedeemVoucherNum());
        stmt.bindLong(28, entity.getRedeemPointAmt());
        stmt.bindLong(29, entity.getRedeemPointPts());
        stmt.bindLong(30, entity.getRedeemPointNum());
        stmt.bindLong(31, entity.getRedeemDiscountAmt());
        stmt.bindLong(32, entity.getRedeemDiscountPts());
        stmt.bindLong(33, entity.getRedeemDiscountNum());
        stmt.bindLong(34, entity.getRedeemProductAmt());
        stmt.bindLong(35, entity.getRedeemProductPts());
        stmt.bindLong(36, entity.getRedeemProductNum());
        stmt.bindLong(37, entity.getQrsAlipaySaleTotalAmt());
        stmt.bindLong(38, entity.getQrsAlipaySaleTotalNum());
        stmt.bindLong(39, entity.getQrsWechatSaleTotalAmt());
        stmt.bindLong(40, entity.getQrsWechatSaleTotalNum());
        stmt.bindLong(41, entity.getQrsTag30SaleTotalAmt());
        stmt.bindLong(42, entity.getQrsTag30SaleTotalNum());
        stmt.bindLong(43, entity.getQrsQrcsVisaSaleTotalAmt());
        stmt.bindLong(44, entity.getQrsQrcsVisaSaleTotalNum());
        stmt.bindLong(45, entity.getQrsQrcsMasterSaleTotalAmt());
        stmt.bindLong(46, entity.getQrsQrcsMasterSaleTotalNum());
        stmt.bindLong(47, entity.getQrsQrcsUpiSaleTotalAmt());
        stmt.bindLong(48, entity.getQrsQrcsUpiSaleTotalNum());
        stmt.bindLong(49, entity.getQrsAlipayRefundTotalAmt());
        stmt.bindLong(50, entity.getQrsAlipayRefundTotalNum());
        stmt.bindLong(51, entity.getQrsWechatRefundTotalAmt());
        stmt.bindLong(52, entity.getQrsWechatRefundTotalNum());
        stmt.bindLong(53, entity.getQrsTag30RefundTotalAmt());
        stmt.bindLong(54, entity.getQrsTag30RefundTotalNum());
        stmt.bindLong(55, entity.getQrsQrcsVisaRefundTotalAmt());
        stmt.bindLong(56, entity.getQrsQrcsVisaRefundTotalNum());
        stmt.bindLong(57, entity.getQrsQrcsMasterRefundTotalAmt());
        stmt.bindLong(58, entity.getQrsQrcsMasterRefundTotalNum());
        stmt.bindLong(59, entity.getQrsQrcsUpiRefundTotalAmt());
        stmt.bindLong(60, entity.getQrsQrcsUpiRefundTotalNum());
    }

    @Override
    protected final void attachEntity(TransTotal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransTotal readEntity(Cursor cursor, int offset) {
        TransTotal entity = new TransTotal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // merchantID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // terminalID
            cursor.getInt(offset + 3), // batchNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateTime
            cursor.getLong(offset + 5), // acquirer_id
            cursor.getShort(offset + 6) != 0, // isClosed
            cursor.getLong(offset + 7), // saleTotalAmt
            cursor.getLong(offset + 8), // saleTotalNum
            cursor.getLong(offset + 9), // voidTotalAmt
            cursor.getLong(offset + 10), // voidTotalNum
            cursor.getLong(offset + 11), // refundTotalAmt
            cursor.getLong(offset + 12), // refundTotalNum
            cursor.getLong(offset + 13), // refundVoidTotalAmt
            cursor.getLong(offset + 14), // refundVoidTotalNum
            cursor.getLong(offset + 15), // saleVoidTotalAmt
            cursor.getLong(offset + 16), // saleVoidTotalNum
            cursor.getLong(offset + 17), // authTotalAmt
            cursor.getLong(offset + 18), // authTotalNum
            cursor.getLong(offset + 19), // offlineTotalAmt
            cursor.getLong(offset + 20), // offlineTotalNum
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // clubPoolId
            cursor.getLong(offset + 22), // redeemTotalAmt
            cursor.getLong(offset + 23), // redeemTotalNum
            cursor.getLong(offset + 24), // redeemVoucherAmt
            cursor.getLong(offset + 25), // redeemVoucherPts
            cursor.getLong(offset + 26), // redeemVoucherNum
            cursor.getLong(offset + 27), // redeemPointAmt
            cursor.getLong(offset + 28), // redeemPointPts
            cursor.getLong(offset + 29), // redeemPointNum
            cursor.getLong(offset + 30), // redeemDiscountAmt
            cursor.getLong(offset + 31), // redeemDiscountPts
            cursor.getLong(offset + 32), // redeemDiscountNum
            cursor.getLong(offset + 33), // redeemProductAmt
            cursor.getLong(offset + 34), // redeemProductPts
            cursor.getLong(offset + 35), // redeemProductNum
            cursor.getLong(offset + 36), // qrsAlipaySaleTotalAmt
            cursor.getLong(offset + 37), // qrsAlipaySaleTotalNum
            cursor.getLong(offset + 38), // qrsWechatSaleTotalAmt
            cursor.getLong(offset + 39), // qrsWechatSaleTotalNum
            cursor.getLong(offset + 40), // qrsTag30SaleTotalAmt
            cursor.getLong(offset + 41), // qrsTag30SaleTotalNum
            cursor.getLong(offset + 42), // qrsQrcsVisaSaleTotalAmt
            cursor.getLong(offset + 43), // qrsQrcsVisaSaleTotalNum
            cursor.getLong(offset + 44), // qrsQrcsMasterSaleTotalAmt
            cursor.getLong(offset + 45), // qrsQrcsMasterSaleTotalNum
            cursor.getLong(offset + 46), // qrsQrcsUpiSaleTotalAmt
            cursor.getLong(offset + 47), // qrsQrcsUpiSaleTotalNum
            cursor.getLong(offset + 48), // qrsAlipayRefundTotalAmt
            cursor.getLong(offset + 49), // qrsAlipayRefundTotalNum
            cursor.getLong(offset + 50), // qrsWechatRefundTotalAmt
            cursor.getLong(offset + 51), // qrsWechatRefundTotalNum
            cursor.getLong(offset + 52), // qrsTag30RefundTotalAmt
            cursor.getLong(offset + 53), // qrsTag30RefundTotalNum
            cursor.getLong(offset + 54), // qrsQrcsVisaRefundTotalAmt
            cursor.getLong(offset + 55), // qrsQrcsVisaRefundTotalNum
            cursor.getLong(offset + 56), // qrsQrcsMasterRefundTotalAmt
            cursor.getLong(offset + 57), // qrsQrcsMasterRefundTotalNum
            cursor.getLong(offset + 58), // qrsQrcsUpiRefundTotalAmt
            cursor.getLong(offset + 59) // qrsQrcsUpiRefundTotalNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransTotal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchantID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTerminalID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBatchNo(cursor.getInt(offset + 3));
        entity.setDateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAcquirer_id(cursor.getLong(offset + 5));
        entity.setIsClosed(cursor.getShort(offset + 6) != 0);
        entity.setSaleTotalAmt(cursor.getLong(offset + 7));
        entity.setSaleTotalNum(cursor.getLong(offset + 8));
        entity.setVoidTotalAmt(cursor.getLong(offset + 9));
        entity.setVoidTotalNum(cursor.getLong(offset + 10));
        entity.setRefundTotalAmt(cursor.getLong(offset + 11));
        entity.setRefundTotalNum(cursor.getLong(offset + 12));
        entity.setRefundVoidTotalAmt(cursor.getLong(offset + 13));
        entity.setRefundVoidTotalNum(cursor.getLong(offset + 14));
        entity.setSaleVoidTotalAmt(cursor.getLong(offset + 15));
        entity.setSaleVoidTotalNum(cursor.getLong(offset + 16));
        entity.setAuthTotalAmt(cursor.getLong(offset + 17));
        entity.setAuthTotalNum(cursor.getLong(offset + 18));
        entity.setOfflineTotalAmt(cursor.getLong(offset + 19));
        entity.setOfflineTotalNum(cursor.getLong(offset + 20));
        entity.setClubPoolId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRedeemTotalAmt(cursor.getLong(offset + 22));
        entity.setRedeemTotalNum(cursor.getLong(offset + 23));
        entity.setRedeemVoucherAmt(cursor.getLong(offset + 24));
        entity.setRedeemVoucherPts(cursor.getLong(offset + 25));
        entity.setRedeemVoucherNum(cursor.getLong(offset + 26));
        entity.setRedeemPointAmt(cursor.getLong(offset + 27));
        entity.setRedeemPointPts(cursor.getLong(offset + 28));
        entity.setRedeemPointNum(cursor.getLong(offset + 29));
        entity.setRedeemDiscountAmt(cursor.getLong(offset + 30));
        entity.setRedeemDiscountPts(cursor.getLong(offset + 31));
        entity.setRedeemDiscountNum(cursor.getLong(offset + 32));
        entity.setRedeemProductAmt(cursor.getLong(offset + 33));
        entity.setRedeemProductPts(cursor.getLong(offset + 34));
        entity.setRedeemProductNum(cursor.getLong(offset + 35));
        entity.setQrsAlipaySaleTotalAmt(cursor.getLong(offset + 36));
        entity.setQrsAlipaySaleTotalNum(cursor.getLong(offset + 37));
        entity.setQrsWechatSaleTotalAmt(cursor.getLong(offset + 38));
        entity.setQrsWechatSaleTotalNum(cursor.getLong(offset + 39));
        entity.setQrsTag30SaleTotalAmt(cursor.getLong(offset + 40));
        entity.setQrsTag30SaleTotalNum(cursor.getLong(offset + 41));
        entity.setQrsQrcsVisaSaleTotalAmt(cursor.getLong(offset + 42));
        entity.setQrsQrcsVisaSaleTotalNum(cursor.getLong(offset + 43));
        entity.setQrsQrcsMasterSaleTotalAmt(cursor.getLong(offset + 44));
        entity.setQrsQrcsMasterSaleTotalNum(cursor.getLong(offset + 45));
        entity.setQrsQrcsUpiSaleTotalAmt(cursor.getLong(offset + 46));
        entity.setQrsQrcsUpiSaleTotalNum(cursor.getLong(offset + 47));
        entity.setQrsAlipayRefundTotalAmt(cursor.getLong(offset + 48));
        entity.setQrsAlipayRefundTotalNum(cursor.getLong(offset + 49));
        entity.setQrsWechatRefundTotalAmt(cursor.getLong(offset + 50));
        entity.setQrsWechatRefundTotalNum(cursor.getLong(offset + 51));
        entity.setQrsTag30RefundTotalAmt(cursor.getLong(offset + 52));
        entity.setQrsTag30RefundTotalNum(cursor.getLong(offset + 53));
        entity.setQrsQrcsVisaRefundTotalAmt(cursor.getLong(offset + 54));
        entity.setQrsQrcsVisaRefundTotalNum(cursor.getLong(offset + 55));
        entity.setQrsQrcsMasterRefundTotalAmt(cursor.getLong(offset + 56));
        entity.setQrsQrcsMasterRefundTotalNum(cursor.getLong(offset + 57));
        entity.setQrsQrcsUpiRefundTotalAmt(cursor.getLong(offset + 58));
        entity.setQrsQrcsUpiRefundTotalNum(cursor.getLong(offset + 59));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransTotal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransTotal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransTotal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAcquirerDao().getAllColumns());
            builder.append(" FROM trans_total T");
            builder.append(" LEFT JOIN acquirer T0 ON T.\"id\"=T0.\"acquirer_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TransTotal loadCurrentDeep(Cursor cursor, boolean lock) {
        TransTotal entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Acquirer acquirer = loadCurrentOther(daoSession.getAcquirerDao(), cursor, offset);
        entity.setAcquirer(acquirer);

        return entity;    
    }

    public TransTotal loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TransTotal> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TransTotal> list = new ArrayList<TransTotal>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TransTotal> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TransTotal> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
