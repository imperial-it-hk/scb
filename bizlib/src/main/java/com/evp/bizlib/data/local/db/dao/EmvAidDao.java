package com.evp.bizlib.data.local.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evp.bizlib.data.entity.EmvAid;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "aid".
*/
public class EmvAidDao extends AbstractDao<EmvAid, Long> {

    public static final String TABLENAME = "aid";

    /**
     * Properties of entity EmvAid.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property Aid = new Property(2, String.class, "aid", false, "aid");
        public final static Property SelFlag = new Property(3, int.class, "selFlag", false, "SEL_FLAG");
        public final static Property Priority = new Property(4, int.class, "priority", false, "PRIORITY");
        public final static Property RdCVMLmt = new Property(5, long.class, "rdCVMLmt", false, "RD_CVMLMT");
        public final static Property RdClssTxnLmt = new Property(6, long.class, "rdClssTxnLmt", false, "RD_CLSS_TXN_LMT");
        public final static Property RdClssFLmt = new Property(7, long.class, "rdClssFLmt", false, "RD_CLSS_FLMT");
        public final static Property RdClssFLmtFlg = new Property(8, int.class, "rdClssFLmtFlg", false, "RD_CLSS_FLMT_FLG");
        public final static Property RdClssTxnLmtFlg = new Property(9, int.class, "rdClssTxnLmtFlg", false, "RD_CLSS_TXN_LMT_FLG");
        public final static Property RdCVMLmtFlg = new Property(10, int.class, "rdCVMLmtFlg", false, "RD_CVMLMT_FLG");
        public final static Property TargetPer = new Property(11, int.class, "targetPer", false, "TARGET_PER");
        public final static Property MaxTargetPer = new Property(12, int.class, "maxTargetPer", false, "MAX_TARGET_PER");
        public final static Property FloorLimitCheckFlg = new Property(13, int.class, "floorLimitCheckFlg", false, "FLOOR_LIMIT_CHECK_FLG");
        public final static Property RandTransSel = new Property(14, boolean.class, "randTransSel", false, "RAND_TRANS_SEL");
        public final static Property VelocityCheck = new Property(15, boolean.class, "velocityCheck", false, "VELOCITY_CHECK");
        public final static Property FloorLimit = new Property(16, long.class, "floorLimit", false, "FLOOR_LIMIT");
        public final static Property Threshold = new Property(17, long.class, "threshold", false, "THRESHOLD");
        public final static Property TacDenial = new Property(18, String.class, "tacDenial", false, "TAC_DENIAL");
        public final static Property TacOnline = new Property(19, String.class, "tacOnline", false, "TAC_ONLINE");
        public final static Property TacDefault = new Property(20, String.class, "tacDefault", false, "TAC_DEFAULT");
        public final static Property AcquirerId = new Property(21, String.class, "acquirerId", false, "ACQUIRER_ID");
        public final static Property DDOL = new Property(22, String.class, "dDOL", false, "D_DOL");
        public final static Property TDOL = new Property(23, String.class, "tDOL", false, "T_DOL");
        public final static Property Version = new Property(24, String.class, "version", false, "VERSION");
        public final static Property RiskManageData = new Property(25, String.class, "riskManageData", false, "RISK_MANAGE_DATA");
        public final static Property JcbClssTermIntProfile = new Property(26, String.class, "jcbClssTermIntProfile", false, "JCB_CLSS_TERM_INT_PROFILE");
        public final static Property JcbClssTermCompatIndicator = new Property(27, int.class, "jcbClssTermCompatIndicator", false, "JCB_CLSS_TERM_COMPAT_INDICATOR");
        public final static Property JcbClssCombinationOpt = new Property(28, String.class, "jcbClssCombinationOpt", false, "JCB_CLSS_COMBINATION_OPT");
        public final static Property TerminalCapabilities = new Property(29, String.class, "terminalCapabilities", false, "TERMINAL_CAPABILITIES");
        public final static Property EnableClss = new Property(30, boolean.class, "enableClss", false, "ENABLE_CLSS");
    }


    public EmvAidDao(DaoConfig config) {
        super(config);
    }
    
    public EmvAidDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"aid\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_NAME\" TEXT NOT NULL ," + // 1: appName
                "\"aid\" TEXT NOT NULL UNIQUE ," + // 2: aid
                "\"SEL_FLAG\" INTEGER NOT NULL ," + // 3: selFlag
                "\"PRIORITY\" INTEGER NOT NULL ," + // 4: priority
                "\"RD_CVMLMT\" INTEGER NOT NULL ," + // 5: rdCVMLmt
                "\"RD_CLSS_TXN_LMT\" INTEGER NOT NULL ," + // 6: rdClssTxnLmt
                "\"RD_CLSS_FLMT\" INTEGER NOT NULL ," + // 7: rdClssFLmt
                "\"RD_CLSS_FLMT_FLG\" INTEGER NOT NULL ," + // 8: rdClssFLmtFlg
                "\"RD_CLSS_TXN_LMT_FLG\" INTEGER NOT NULL ," + // 9: rdClssTxnLmtFlg
                "\"RD_CVMLMT_FLG\" INTEGER NOT NULL ," + // 10: rdCVMLmtFlg
                "\"TARGET_PER\" INTEGER NOT NULL ," + // 11: targetPer
                "\"MAX_TARGET_PER\" INTEGER NOT NULL ," + // 12: maxTargetPer
                "\"FLOOR_LIMIT_CHECK_FLG\" INTEGER NOT NULL ," + // 13: floorLimitCheckFlg
                "\"RAND_TRANS_SEL\" INTEGER NOT NULL ," + // 14: randTransSel
                "\"VELOCITY_CHECK\" INTEGER NOT NULL ," + // 15: velocityCheck
                "\"FLOOR_LIMIT\" INTEGER NOT NULL ," + // 16: floorLimit
                "\"THRESHOLD\" INTEGER NOT NULL ," + // 17: threshold
                "\"TAC_DENIAL\" TEXT," + // 18: tacDenial
                "\"TAC_ONLINE\" TEXT," + // 19: tacOnline
                "\"TAC_DEFAULT\" TEXT," + // 20: tacDefault
                "\"ACQUIRER_ID\" TEXT," + // 21: acquirerId
                "\"D_DOL\" TEXT," + // 22: dDOL
                "\"T_DOL\" TEXT," + // 23: tDOL
                "\"VERSION\" TEXT," + // 24: version
                "\"RISK_MANAGE_DATA\" TEXT," + // 25: riskManageData
                "\"JCB_CLSS_TERM_INT_PROFILE\" TEXT," + // 26: jcbClssTermIntProfile
                "\"JCB_CLSS_TERM_COMPAT_INDICATOR\" INTEGER NOT NULL ," + // 27: jcbClssTermCompatIndicator
                "\"JCB_CLSS_COMBINATION_OPT\" TEXT," + // 28: jcbClssCombinationOpt
                "\"TERMINAL_CAPABILITIES\" TEXT," + // 29: terminalCapabilities
                "\"ENABLE_CLSS\" INTEGER NOT NULL );"); // 30: enableClss
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"aid\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmvAid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAppName());
        stmt.bindString(3, entity.getAid());
        stmt.bindLong(4, entity.getSelFlag());
        stmt.bindLong(5, entity.getPriority());
        stmt.bindLong(6, entity.getRdCVMLmt());
        stmt.bindLong(7, entity.getRdClssTxnLmt());
        stmt.bindLong(8, entity.getRdClssFLmt());
        stmt.bindLong(9, entity.getRdClssFLmtFlg());
        stmt.bindLong(10, entity.getRdClssTxnLmtFlg());
        stmt.bindLong(11, entity.getRdCVMLmtFlg());
        stmt.bindLong(12, entity.getTargetPer());
        stmt.bindLong(13, entity.getMaxTargetPer());
        stmt.bindLong(14, entity.getFloorLimitCheckFlg());
        stmt.bindLong(15, entity.getRandTransSel() ? 1L: 0L);
        stmt.bindLong(16, entity.getVelocityCheck() ? 1L: 0L);
        stmt.bindLong(17, entity.getFloorLimit());
        stmt.bindLong(18, entity.getThreshold());
 
        String tacDenial = entity.getTacDenial();
        if (tacDenial != null) {
            stmt.bindString(19, tacDenial);
        }
 
        String tacOnline = entity.getTacOnline();
        if (tacOnline != null) {
            stmt.bindString(20, tacOnline);
        }
 
        String tacDefault = entity.getTacDefault();
        if (tacDefault != null) {
            stmt.bindString(21, tacDefault);
        }
 
        String acquirerId = entity.getAcquirerId();
        if (acquirerId != null) {
            stmt.bindString(22, acquirerId);
        }
 
        String dDOL = entity.getDDOL();
        if (dDOL != null) {
            stmt.bindString(23, dDOL);
        }
 
        String tDOL = entity.getTDOL();
        if (tDOL != null) {
            stmt.bindString(24, tDOL);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(25, version);
        }
 
        String riskManageData = entity.getRiskManageData();
        if (riskManageData != null) {
            stmt.bindString(26, riskManageData);
        }
 
        String jcbClssTermIntProfile = entity.getJcbClssTermIntProfile();
        if (jcbClssTermIntProfile != null) {
            stmt.bindString(27, jcbClssTermIntProfile);
        }
        stmt.bindLong(28, entity.getJcbClssTermCompatIndicator());
 
        String jcbClssCombinationOpt = entity.getJcbClssCombinationOpt();
        if (jcbClssCombinationOpt != null) {
            stmt.bindString(29, jcbClssCombinationOpt);
        }
 
        String terminalCapabilities = entity.getTerminalCapabilities();
        if (terminalCapabilities != null) {
            stmt.bindString(30, terminalCapabilities);
        }
        stmt.bindLong(31, entity.getEnableClss() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmvAid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAppName());
        stmt.bindString(3, entity.getAid());
        stmt.bindLong(4, entity.getSelFlag());
        stmt.bindLong(5, entity.getPriority());
        stmt.bindLong(6, entity.getRdCVMLmt());
        stmt.bindLong(7, entity.getRdClssTxnLmt());
        stmt.bindLong(8, entity.getRdClssFLmt());
        stmt.bindLong(9, entity.getRdClssFLmtFlg());
        stmt.bindLong(10, entity.getRdClssTxnLmtFlg());
        stmt.bindLong(11, entity.getRdCVMLmtFlg());
        stmt.bindLong(12, entity.getTargetPer());
        stmt.bindLong(13, entity.getMaxTargetPer());
        stmt.bindLong(14, entity.getFloorLimitCheckFlg());
        stmt.bindLong(15, entity.getRandTransSel() ? 1L: 0L);
        stmt.bindLong(16, entity.getVelocityCheck() ? 1L: 0L);
        stmt.bindLong(17, entity.getFloorLimit());
        stmt.bindLong(18, entity.getThreshold());
 
        String tacDenial = entity.getTacDenial();
        if (tacDenial != null) {
            stmt.bindString(19, tacDenial);
        }
 
        String tacOnline = entity.getTacOnline();
        if (tacOnline != null) {
            stmt.bindString(20, tacOnline);
        }
 
        String tacDefault = entity.getTacDefault();
        if (tacDefault != null) {
            stmt.bindString(21, tacDefault);
        }
 
        String acquirerId = entity.getAcquirerId();
        if (acquirerId != null) {
            stmt.bindString(22, acquirerId);
        }
 
        String dDOL = entity.getDDOL();
        if (dDOL != null) {
            stmt.bindString(23, dDOL);
        }
 
        String tDOL = entity.getTDOL();
        if (tDOL != null) {
            stmt.bindString(24, tDOL);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(25, version);
        }
 
        String riskManageData = entity.getRiskManageData();
        if (riskManageData != null) {
            stmt.bindString(26, riskManageData);
        }
 
        String jcbClssTermIntProfile = entity.getJcbClssTermIntProfile();
        if (jcbClssTermIntProfile != null) {
            stmt.bindString(27, jcbClssTermIntProfile);
        }
        stmt.bindLong(28, entity.getJcbClssTermCompatIndicator());
 
        String jcbClssCombinationOpt = entity.getJcbClssCombinationOpt();
        if (jcbClssCombinationOpt != null) {
            stmt.bindString(29, jcbClssCombinationOpt);
        }
 
        String terminalCapabilities = entity.getTerminalCapabilities();
        if (terminalCapabilities != null) {
            stmt.bindString(30, terminalCapabilities);
        }
        stmt.bindLong(31, entity.getEnableClss() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmvAid readEntity(Cursor cursor, int offset) {
        EmvAid entity = new EmvAid( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // appName
            cursor.getString(offset + 2), // aid
            cursor.getInt(offset + 3), // selFlag
            cursor.getInt(offset + 4), // priority
            cursor.getLong(offset + 5), // rdCVMLmt
            cursor.getLong(offset + 6), // rdClssTxnLmt
            cursor.getLong(offset + 7), // rdClssFLmt
            cursor.getInt(offset + 8), // rdClssFLmtFlg
            cursor.getInt(offset + 9), // rdClssTxnLmtFlg
            cursor.getInt(offset + 10), // rdCVMLmtFlg
            cursor.getInt(offset + 11), // targetPer
            cursor.getInt(offset + 12), // maxTargetPer
            cursor.getInt(offset + 13), // floorLimitCheckFlg
            cursor.getShort(offset + 14) != 0, // randTransSel
            cursor.getShort(offset + 15) != 0, // velocityCheck
            cursor.getLong(offset + 16), // floorLimit
            cursor.getLong(offset + 17), // threshold
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tacDenial
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // tacOnline
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tacDefault
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // acquirerId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // dDOL
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // tDOL
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // version
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // riskManageData
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // jcbClssTermIntProfile
            cursor.getInt(offset + 27), // jcbClssTermCompatIndicator
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // jcbClssCombinationOpt
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // terminalCapabilities
            cursor.getShort(offset + 30) != 0 // enableClss
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmvAid entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.getString(offset + 1));
        entity.setAid(cursor.getString(offset + 2));
        entity.setSelFlag(cursor.getInt(offset + 3));
        entity.setPriority(cursor.getInt(offset + 4));
        entity.setRdCVMLmt(cursor.getLong(offset + 5));
        entity.setRdClssTxnLmt(cursor.getLong(offset + 6));
        entity.setRdClssFLmt(cursor.getLong(offset + 7));
        entity.setRdClssFLmtFlg(cursor.getInt(offset + 8));
        entity.setRdClssTxnLmtFlg(cursor.getInt(offset + 9));
        entity.setRdCVMLmtFlg(cursor.getInt(offset + 10));
        entity.setTargetPer(cursor.getInt(offset + 11));
        entity.setMaxTargetPer(cursor.getInt(offset + 12));
        entity.setFloorLimitCheckFlg(cursor.getInt(offset + 13));
        entity.setRandTransSel(cursor.getShort(offset + 14) != 0);
        entity.setVelocityCheck(cursor.getShort(offset + 15) != 0);
        entity.setFloorLimit(cursor.getLong(offset + 16));
        entity.setThreshold(cursor.getLong(offset + 17));
        entity.setTacDenial(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTacOnline(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTacDefault(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAcquirerId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDDOL(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTDOL(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVersion(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRiskManageData(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setJcbClssTermIntProfile(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setJcbClssTermCompatIndicator(cursor.getInt(offset + 27));
        entity.setJcbClssCombinationOpt(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTerminalCapabilities(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setEnableClss(cursor.getShort(offset + 30) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmvAid entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmvAid entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmvAid entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
