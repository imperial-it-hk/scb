package com.evp.bizlib.data.local.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evp.bizlib.data.entity.Acquirer;
import com.evp.bizlib.data.entity.Issuer;
import com.evp.bizlib.data.entity.SettledTransData.ETransStatus;
import com.evp.bizlib.data.entity.SettledTransData.ETransStatusConverter;
import com.evp.bizlib.data.entity.SettledTransData.EnterMode;
import com.evp.bizlib.data.entity.SettledTransData.EnterModeConverter;
import com.evp.bizlib.data.entity.SettledTransData.LocaleConverter;
import com.evp.bizlib.data.entity.SettledTransData.OfflineStatus;
import com.evp.bizlib.data.entity.SettledTransData.OfflineStatusConverter;
import com.evp.bizlib.data.entity.SettledTransData.ReversalStatus;
import com.evp.bizlib.data.entity.SettledTransData.ReversalStatusConverter;
import java.util.Locale;

import com.evp.bizlib.data.entity.SettledTransData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "settled_trans_data".
*/
public class SettledTransDataDao extends AbstractDao<SettledTransData, Long> {

    public static final String TABLENAME = "settled_trans_data";

    /**
     * Properties of entity SettledTransData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property TraceNo = new Property(1, long.class, "traceNo", false, "trace_no");
        public final static Property StanNo = new Property(2, long.class, "stanNo", false, "stan_no");
        public final static Property TransType = new Property(3, String.class, "transType", false, "type");
        public final static Property TransState = new Property(4, String.class, "transState", false, "state");
        public final static Property OfflineSendState = new Property(5, String.class, "offlineSendState", false, "offline_state");
        public final static Property Amount = new Property(6, String.class, "amount", false, "amount");
        public final static Property BatchNo = new Property(7, long.class, "batchNo", false, "batch_no");
        public final static Property DateTime = new Property(8, String.class, "dateTime", false, "transaction_date_time");
        public final static Property RefNo = new Property(9, String.class, "refNo", false, "retrieval_ref_no");
        public final static Property SignPath = new Property(10, byte[].class, "signPath", false, "sign_path");
        public final static Property Issuer_id = new Property(11, long.class, "issuer_id", false, "ISSUER_ID");
        public final static Property Acquirer_id = new Property(12, long.class, "acquirer_id", false, "ACQUIRER_ID");
        public final static Property ReversalStatus = new Property(13, String.class, "reversalStatus", false, "REVERSAL");
        public final static Property OrigTransNo = new Property(14, long.class, "origTransNo", false, "ORIG_TRANS_NO");
        public final static Property OrigStanNo = new Property(15, long.class, "origStanNo", false, "ORIG_STAN_NO");
        public final static Property OrigTransType = new Property(16, String.class, "origTransType", false, "ORIG_TRANS_TYPE");
        public final static Property IsUpload = new Property(17, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property SendTimes = new Property(18, int.class, "sendTimes", false, "SEND_TIMES");
        public final static Property ProcCode = new Property(19, String.class, "procCode", false, "PROC_CODE");
        public final static Property TipAmount = new Property(20, String.class, "tipAmount", false, "TIP_AMOUNT");
        public final static Property Currency = new Property(21, String.class, "currency", false, "CURRENCY");
        public final static Property OrigBatchNo = new Property(22, long.class, "origBatchNo", false, "ORIG_BATCH_NO");
        public final static Property Pan = new Property(23, String.class, "pan", false, "PAN");
        public final static Property OrigDateTime = new Property(24, String.class, "origDateTime", false, "ORIG_DATE_TIME");
        public final static Property SettleDateTime = new Property(25, String.class, "settleDateTime", false, "SETTLE_DATE_TIME");
        public final static Property ExpDate = new Property(26, String.class, "expDate", false, "EXP_DATE");
        public final static Property EnterMode = new Property(27, String.class, "enterMode", false, "ENTER_MODE");
        public final static Property Nii = new Property(28, String.class, "nii", false, "NII");
        public final static Property OrigRefNo = new Property(29, String.class, "origRefNo", false, "ORIG_REF_NO");
        public final static Property AuthCode = new Property(30, String.class, "authCode", false, "AUTH_CODE");
        public final static Property OrigAuthCode = new Property(31, String.class, "origAuthCode", false, "ORIG_AUTH_CODE");
        public final static Property IssuerCode = new Property(32, String.class, "issuerCode", false, "ISSUER_CODE");
        public final static Property AcqCode = new Property(33, String.class, "acqCode", false, "ACQ_CODE");
        public final static Property HasPin = new Property(34, boolean.class, "hasPin", false, "HAS_PIN");
        public final static Property Track1 = new Property(35, String.class, "track1", false, "TRACK1");
        public final static Property Track2 = new Property(36, String.class, "track2", false, "TRACK2");
        public final static Property Track3 = new Property(37, String.class, "track3", false, "TRACK3");
        public final static Property DupReason = new Property(38, String.class, "dupReason", false, "DUP_REASON");
        public final static Property Reserved = new Property(39, String.class, "reserved", false, "RESERVED");
        public final static Property PinFree = new Property(40, boolean.class, "pinFree", false, "PIN_FREE");
        public final static Property SignFree = new Property(41, boolean.class, "signFree", false, "SIGN_FREE");
        public final static Property IsCDCVM = new Property(42, boolean.class, "isCDCVM", false, "IS_CDCVM");
        public final static Property IsOnlineTrans = new Property(43, boolean.class, "isOnlineTrans", false, "IS_ONLINE_TRANS");
        public final static Property SignData = new Property(44, byte[].class, "signData", false, "SIGN_DATA");
        public final static Property EmvResult = new Property(45, String.class, "emvResult", false, "EMV_RESULT");
        public final static Property CardSerialNo = new Property(46, String.class, "cardSerialNo", false, "CARD_SERIAL_NO");
        public final static Property SendIccData = new Property(47, String.class, "sendIccData", false, "SEND_ICC_DATA");
        public final static Property DupIccData = new Property(48, String.class, "dupIccData", false, "DUP_ICC_DATA");
        public final static Property Tc = new Property(49, String.class, "tc", false, "TC");
        public final static Property Arqc = new Property(50, String.class, "arqc", false, "ARQC");
        public final static Property Arpc = new Property(51, String.class, "arpc", false, "ARPC");
        public final static Property Tvr = new Property(52, String.class, "tvr", false, "TVR");
        public final static Property Aid = new Property(53, String.class, "aid", false, "AID");
        public final static Property EmvAppLabel = new Property(54, String.class, "emvAppLabel", false, "EMV_APP_LABEL");
        public final static Property EmvAppName = new Property(55, String.class, "emvAppName", false, "EMV_APP_NAME");
        public final static Property Tsi = new Property(56, String.class, "tsi", false, "TSI");
        public final static Property Atc = new Property(57, String.class, "atc", false, "ATC");
        public final static Property PhoneNum = new Property(58, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Email = new Property(59, String.class, "email", false, "EMAIL");
        public final static Property CardholderName = new Property(60, String.class, "cardholderName", false, "CARDHOLDER_NAME");
        public final static Property FundingSource = new Property(61, String.class, "fundingSource", false, "FUNDING_SOURCE");
        public final static Property DccForeignAmount = new Property(62, String.class, "dccForeignAmount", false, "DCC_FOREIGN_AMOUNT");
        public final static Property DccExchangeRate = new Property(63, String.class, "dccExchangeRate", false, "DCC_EXCHANGE_RATE");
        public final static Property DccCurrencyCode = new Property(64, String.class, "dccCurrencyCode", false, "DCC_CURRENCY_CODE");
        public final static Property QrCode = new Property(65, String.class, "qrCode", false, "QR_CODE");
        public final static Property BillPaymentRef1 = new Property(66, String.class, "billPaymentRef1", false, "BILL_PAYMENT_REF1");
        public final static Property BillPaymentRef2 = new Property(67, String.class, "billPaymentRef2", false, "BILL_PAYMENT_REF2");
        public final static Property BillPaymentRef3 = new Property(68, String.class, "billPaymentRef3", false, "BILL_PAYMENT_REF3");
        public final static Property TmkKeyIndex = new Property(69, String.class, "tmkKeyIndex", false, "TMK_KEY_INDEX");
        public final static Property DekKeyIndex = new Property(70, String.class, "dekKeyIndex", false, "DEK_KEY_INDEX");
        public final static Property IsBSC = new Property(71, boolean.class, "isBSC", false, "IS_BSC");
        public final static Property AmountCNY = new Property(72, String.class, "amountCNY", false, "AMOUNT_CNY");
        public final static Property ExchangeRate = new Property(73, String.class, "exchangeRate", false, "EXCHANGE_RATE");
        public final static Property PaymentId = new Property(74, String.class, "paymentId", false, "PAYMENT_ID");
        public final static Property PaymentChannel = new Property(75, String.class, "paymentChannel", false, "PAYMENT_CHANNEL");
        public final static Property BankCode = new Property(76, String.class, "bankCode", false, "BANK_CODE");
        public final static Property PaymentPlan = new Property(77, int.class, "paymentPlan", false, "PAYMENT_PLAN");
        public final static Property PaymentTerm = new Property(78, String.class, "paymentTerm", false, "PAYMENT_TERM");
        public final static Property ProductCode = new Property(79, String.class, "productCode", false, "PRODUCT_CODE");
        public final static Property ProductSN = new Property(80, String.class, "productSN", false, "PRODUCT_SN");
        public final static Property RedeemQty = new Property(81, String.class, "redeemQty", false, "REDEEM_QTY");
        public final static Property RedeemType = new Property(82, String.class, "redeemType", false, "REDEEM_TYPE");
        public final static Property RedeemAmt = new Property(83, String.class, "redeemAmt", false, "REDEEM_AMT");
        public final static Property RedeemPts = new Property(84, String.class, "redeemPts", false, "REDEEM_PTS");
        public final static Property ClubPoolId = new Property(85, String.class, "clubPoolId", false, "CLUB_POOL_ID");
        public final static Property OrigField63 = new Property(86, byte[].class, "origField63", false, "ORIG_FIELD63");
        public final static Property BillerId = new Property(87, String.class, "billerId", false, "BILLER_ID");
        public final static Property ConsumerPan = new Property(88, String.class, "consumerPan", false, "CONSUMER_PAN");
        public final static Property MerchantPan = new Property(89, String.class, "merchantPan", false, "MERCHANT_PAN");
        public final static Property TransactionId = new Property(90, String.class, "transactionId", false, "TRANSACTION_ID");
        public final static Property QrCodeId = new Property(91, String.class, "qrCodeId", false, "QR_CODE_ID");
        public final static Property CurrencyCode = new Property(92, String.class, "currencyCode", false, "CURRENCY_CODE");
        public final static Property SendingBankCode = new Property(93, String.class, "sendingBankCode", false, "SENDING_BANK_CODE");
        public final static Property PayeeProxyId = new Property(94, String.class, "payeeProxyId", false, "PAYEE_PROXY_ID");
        public final static Property PayeeProxyType = new Property(95, String.class, "payeeProxyType", false, "PAYEE_PROXY_TYPE");
        public final static Property PayeeAccountNumber = new Property(96, String.class, "payeeAccountNumber", false, "PAYEE_ACCOUNT_NUMBER");
        public final static Property PayerProxyId = new Property(97, String.class, "payerProxyId", false, "PAYER_PROXY_ID");
        public final static Property PayerProxyType = new Property(98, String.class, "payerProxyType", false, "PAYER_PROXY_TYPE");
        public final static Property PayerAccountNumber = new Property(99, String.class, "payerAccountNumber", false, "PAYER_ACCOUNT_NUMBER");
        public final static Property ReceivingBankCode = new Property(100, String.class, "receivingBankCode", false, "RECEIVING_BANK_CODE");
        public final static Property ThaiQRTag = new Property(101, String.class, "thaiQRTag", false, "THAI_QRTAG");
        public final static Property IsPullSlip = new Property(102, boolean.class, "isPullSlip", false, "IS_PULL_SLIP");
        public final static Property QrcsTraceNo = new Property(103, String.class, "qrcsTraceNo", false, "QRCS_TRACE_NO");
        public final static Property SaleType = new Property(104, String.class, "saleType", false, "SALE_TYPE");
        public final static Property Field63 = new Property(105, byte[].class, "field63", false, "FIELD63");
    }

    private DaoSession daoSession;

    private final ETransStatusConverter transStateConverter = new ETransStatusConverter();
    private final OfflineStatusConverter offlineSendStateConverter = new OfflineStatusConverter();
    private final ReversalStatusConverter reversalStatusConverter = new ReversalStatusConverter();
    private final LocaleConverter currencyConverter = new LocaleConverter();
    private final EnterModeConverter enterModeConverter = new EnterModeConverter();

    public SettledTransDataDao(DaoConfig config) {
        super(config);
    }
    
    public SettledTransDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"settled_trans_data\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"trace_no\" INTEGER NOT NULL UNIQUE ," + // 1: traceNo
                "\"stan_no\" INTEGER NOT NULL UNIQUE ," + // 2: stanNo
                "\"type\" TEXT NOT NULL ," + // 3: transType
                "\"state\" TEXT NOT NULL ," + // 4: transState
                "\"offline_state\" TEXT," + // 5: offlineSendState
                "\"amount\" TEXT," + // 6: amount
                "\"batch_no\" INTEGER NOT NULL ," + // 7: batchNo
                "\"transaction_date_time\" TEXT," + // 8: dateTime
                "\"retrieval_ref_no\" TEXT," + // 9: refNo
                "\"sign_path\" BLOB," + // 10: signPath
                "\"ISSUER_ID\" INTEGER NOT NULL ," + // 11: issuer_id
                "\"ACQUIRER_ID\" INTEGER NOT NULL ," + // 12: acquirer_id
                "\"REVERSAL\" TEXT NOT NULL ," + // 13: reversalStatus
                "\"ORIG_TRANS_NO\" INTEGER NOT NULL ," + // 14: origTransNo
                "\"ORIG_STAN_NO\" INTEGER NOT NULL ," + // 15: origStanNo
                "\"ORIG_TRANS_TYPE\" TEXT," + // 16: origTransType
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 17: isUpload
                "\"SEND_TIMES\" INTEGER NOT NULL ," + // 18: sendTimes
                "\"PROC_CODE\" TEXT," + // 19: procCode
                "\"TIP_AMOUNT\" TEXT," + // 20: tipAmount
                "\"CURRENCY\" TEXT," + // 21: currency
                "\"ORIG_BATCH_NO\" INTEGER NOT NULL ," + // 22: origBatchNo
                "\"PAN\" TEXT," + // 23: pan
                "\"ORIG_DATE_TIME\" TEXT," + // 24: origDateTime
                "\"SETTLE_DATE_TIME\" TEXT," + // 25: settleDateTime
                "\"EXP_DATE\" TEXT," + // 26: expDate
                "\"ENTER_MODE\" TEXT," + // 27: enterMode
                "\"NII\" TEXT," + // 28: nii
                "\"ORIG_REF_NO\" TEXT," + // 29: origRefNo
                "\"AUTH_CODE\" TEXT," + // 30: authCode
                "\"ORIG_AUTH_CODE\" TEXT," + // 31: origAuthCode
                "\"ISSUER_CODE\" TEXT," + // 32: issuerCode
                "\"ACQ_CODE\" TEXT," + // 33: acqCode
                "\"HAS_PIN\" INTEGER NOT NULL ," + // 34: hasPin
                "\"TRACK1\" TEXT," + // 35: track1
                "\"TRACK2\" TEXT," + // 36: track2
                "\"TRACK3\" TEXT," + // 37: track3
                "\"DUP_REASON\" TEXT," + // 38: dupReason
                "\"RESERVED\" TEXT," + // 39: reserved
                "\"PIN_FREE\" INTEGER NOT NULL ," + // 40: pinFree
                "\"SIGN_FREE\" INTEGER NOT NULL ," + // 41: signFree
                "\"IS_CDCVM\" INTEGER NOT NULL ," + // 42: isCDCVM
                "\"IS_ONLINE_TRANS\" INTEGER NOT NULL ," + // 43: isOnlineTrans
                "\"SIGN_DATA\" BLOB," + // 44: signData
                "\"EMV_RESULT\" TEXT," + // 45: emvResult
                "\"CARD_SERIAL_NO\" TEXT," + // 46: cardSerialNo
                "\"SEND_ICC_DATA\" TEXT," + // 47: sendIccData
                "\"DUP_ICC_DATA\" TEXT," + // 48: dupIccData
                "\"TC\" TEXT," + // 49: tc
                "\"ARQC\" TEXT," + // 50: arqc
                "\"ARPC\" TEXT," + // 51: arpc
                "\"TVR\" TEXT," + // 52: tvr
                "\"AID\" TEXT," + // 53: aid
                "\"EMV_APP_LABEL\" TEXT," + // 54: emvAppLabel
                "\"EMV_APP_NAME\" TEXT," + // 55: emvAppName
                "\"TSI\" TEXT," + // 56: tsi
                "\"ATC\" TEXT," + // 57: atc
                "\"PHONE_NUM\" TEXT," + // 58: phoneNum
                "\"EMAIL\" TEXT," + // 59: email
                "\"CARDHOLDER_NAME\" TEXT," + // 60: cardholderName
                "\"FUNDING_SOURCE\" TEXT," + // 61: fundingSource
                "\"DCC_FOREIGN_AMOUNT\" TEXT," + // 62: dccForeignAmount
                "\"DCC_EXCHANGE_RATE\" TEXT," + // 63: dccExchangeRate
                "\"DCC_CURRENCY_CODE\" TEXT," + // 64: dccCurrencyCode
                "\"QR_CODE\" TEXT," + // 65: qrCode
                "\"BILL_PAYMENT_REF1\" TEXT," + // 66: billPaymentRef1
                "\"BILL_PAYMENT_REF2\" TEXT," + // 67: billPaymentRef2
                "\"BILL_PAYMENT_REF3\" TEXT," + // 68: billPaymentRef3
                "\"TMK_KEY_INDEX\" TEXT," + // 69: tmkKeyIndex
                "\"DEK_KEY_INDEX\" TEXT," + // 70: dekKeyIndex
                "\"IS_BSC\" INTEGER NOT NULL ," + // 71: isBSC
                "\"AMOUNT_CNY\" TEXT," + // 72: amountCNY
                "\"EXCHANGE_RATE\" TEXT," + // 73: exchangeRate
                "\"PAYMENT_ID\" TEXT," + // 74: paymentId
                "\"PAYMENT_CHANNEL\" TEXT," + // 75: paymentChannel
                "\"BANK_CODE\" TEXT," + // 76: bankCode
                "\"PAYMENT_PLAN\" INTEGER NOT NULL ," + // 77: paymentPlan
                "\"PAYMENT_TERM\" TEXT," + // 78: paymentTerm
                "\"PRODUCT_CODE\" TEXT," + // 79: productCode
                "\"PRODUCT_SN\" TEXT," + // 80: productSN
                "\"REDEEM_QTY\" TEXT," + // 81: redeemQty
                "\"REDEEM_TYPE\" TEXT," + // 82: redeemType
                "\"REDEEM_AMT\" TEXT," + // 83: redeemAmt
                "\"REDEEM_PTS\" TEXT," + // 84: redeemPts
                "\"CLUB_POOL_ID\" TEXT," + // 85: clubPoolId
                "\"ORIG_FIELD63\" BLOB," + // 86: origField63
                "\"BILLER_ID\" TEXT," + // 87: billerId
                "\"CONSUMER_PAN\" TEXT," + // 88: consumerPan
                "\"MERCHANT_PAN\" TEXT," + // 89: merchantPan
                "\"TRANSACTION_ID\" TEXT," + // 90: transactionId
                "\"QR_CODE_ID\" TEXT," + // 91: qrCodeId
                "\"CURRENCY_CODE\" TEXT," + // 92: currencyCode
                "\"SENDING_BANK_CODE\" TEXT," + // 93: sendingBankCode
                "\"PAYEE_PROXY_ID\" TEXT," + // 94: payeeProxyId
                "\"PAYEE_PROXY_TYPE\" TEXT," + // 95: payeeProxyType
                "\"PAYEE_ACCOUNT_NUMBER\" TEXT," + // 96: payeeAccountNumber
                "\"PAYER_PROXY_ID\" TEXT," + // 97: payerProxyId
                "\"PAYER_PROXY_TYPE\" TEXT," + // 98: payerProxyType
                "\"PAYER_ACCOUNT_NUMBER\" TEXT," + // 99: payerAccountNumber
                "\"RECEIVING_BANK_CODE\" TEXT," + // 100: receivingBankCode
                "\"THAI_QRTAG\" TEXT," + // 101: thaiQRTag
                "\"IS_PULL_SLIP\" INTEGER NOT NULL ," + // 102: isPullSlip
                "\"QRCS_TRACE_NO\" TEXT," + // 103: qrcsTraceNo
                "\"SALE_TYPE\" TEXT," + // 104: saleType
                "\"FIELD63\" BLOB);"); // 105: field63
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"settled_trans_data\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SettledTransData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTraceNo());
        stmt.bindLong(3, entity.getStanNo());
        stmt.bindString(4, entity.getTransType());
        stmt.bindString(5, transStateConverter.convertToDatabaseValue(entity.getTransState()));
 
        OfflineStatus offlineSendState = entity.getOfflineSendState();
        if (offlineSendState != null) {
            stmt.bindString(6, offlineSendStateConverter.convertToDatabaseValue(offlineSendState));
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
        stmt.bindLong(8, entity.getBatchNo());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
 
        String refNo = entity.getRefNo();
        if (refNo != null) {
            stmt.bindString(10, refNo);
        }
 
        byte[] signPath = entity.getSignPath();
        if (signPath != null) {
            stmt.bindBlob(11, signPath);
        }
        stmt.bindLong(12, entity.getIssuer_id());
        stmt.bindLong(13, entity.getAcquirer_id());
        stmt.bindString(14, reversalStatusConverter.convertToDatabaseValue(entity.getReversalStatus()));
        stmt.bindLong(15, entity.getOrigTransNo());
        stmt.bindLong(16, entity.getOrigStanNo());
 
        String origTransType = entity.getOrigTransType();
        if (origTransType != null) {
            stmt.bindString(17, origTransType);
        }
        stmt.bindLong(18, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(19, entity.getSendTimes());
 
        String procCode = entity.getProcCode();
        if (procCode != null) {
            stmt.bindString(20, procCode);
        }
 
        String tipAmount = entity.getTipAmount();
        if (tipAmount != null) {
            stmt.bindString(21, tipAmount);
        }
 
        Locale currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(22, currencyConverter.convertToDatabaseValue(currency));
        }
        stmt.bindLong(23, entity.getOrigBatchNo());
 
        String pan = entity.getPan();
        if (pan != null) {
            stmt.bindString(24, pan);
        }
 
        String origDateTime = entity.getOrigDateTime();
        if (origDateTime != null) {
            stmt.bindString(25, origDateTime);
        }
 
        String settleDateTime = entity.getSettleDateTime();
        if (settleDateTime != null) {
            stmt.bindString(26, settleDateTime);
        }
 
        String expDate = entity.getExpDate();
        if (expDate != null) {
            stmt.bindString(27, expDate);
        }
 
        EnterMode enterMode = entity.getEnterMode();
        if (enterMode != null) {
            stmt.bindString(28, enterModeConverter.convertToDatabaseValue(enterMode));
        }
 
        String nii = entity.getNii();
        if (nii != null) {
            stmt.bindString(29, nii);
        }
 
        String origRefNo = entity.getOrigRefNo();
        if (origRefNo != null) {
            stmt.bindString(30, origRefNo);
        }
 
        String authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindString(31, authCode);
        }
 
        String origAuthCode = entity.getOrigAuthCode();
        if (origAuthCode != null) {
            stmt.bindString(32, origAuthCode);
        }
 
        String issuerCode = entity.getIssuerCode();
        if (issuerCode != null) {
            stmt.bindString(33, issuerCode);
        }
 
        String acqCode = entity.getAcqCode();
        if (acqCode != null) {
            stmt.bindString(34, acqCode);
        }
        stmt.bindLong(35, entity.getHasPin() ? 1L: 0L);
 
        String track1 = entity.getTrack1();
        if (track1 != null) {
            stmt.bindString(36, track1);
        }
 
        String track2 = entity.getTrack2();
        if (track2 != null) {
            stmt.bindString(37, track2);
        }
 
        String track3 = entity.getTrack3();
        if (track3 != null) {
            stmt.bindString(38, track3);
        }
 
        String dupReason = entity.getDupReason();
        if (dupReason != null) {
            stmt.bindString(39, dupReason);
        }
 
        String reserved = entity.getReserved();
        if (reserved != null) {
            stmt.bindString(40, reserved);
        }
        stmt.bindLong(41, entity.getPinFree() ? 1L: 0L);
        stmt.bindLong(42, entity.getSignFree() ? 1L: 0L);
        stmt.bindLong(43, entity.getIsCDCVM() ? 1L: 0L);
        stmt.bindLong(44, entity.getIsOnlineTrans() ? 1L: 0L);
 
        byte[] signData = entity.getSignData();
        if (signData != null) {
            stmt.bindBlob(45, signData);
        }
 
        String emvResult = entity.getEmvResult();
        if (emvResult != null) {
            stmt.bindString(46, emvResult);
        }
 
        String cardSerialNo = entity.getCardSerialNo();
        if (cardSerialNo != null) {
            stmt.bindString(47, cardSerialNo);
        }
 
        String sendIccData = entity.getSendIccData();
        if (sendIccData != null) {
            stmt.bindString(48, sendIccData);
        }
 
        String dupIccData = entity.getDupIccData();
        if (dupIccData != null) {
            stmt.bindString(49, dupIccData);
        }
 
        String tc = entity.getTc();
        if (tc != null) {
            stmt.bindString(50, tc);
        }
 
        String arqc = entity.getArqc();
        if (arqc != null) {
            stmt.bindString(51, arqc);
        }
 
        String arpc = entity.getArpc();
        if (arpc != null) {
            stmt.bindString(52, arpc);
        }
 
        String tvr = entity.getTvr();
        if (tvr != null) {
            stmt.bindString(53, tvr);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(54, aid);
        }
 
        String emvAppLabel = entity.getEmvAppLabel();
        if (emvAppLabel != null) {
            stmt.bindString(55, emvAppLabel);
        }
 
        String emvAppName = entity.getEmvAppName();
        if (emvAppName != null) {
            stmt.bindString(56, emvAppName);
        }
 
        String tsi = entity.getTsi();
        if (tsi != null) {
            stmt.bindString(57, tsi);
        }
 
        String atc = entity.getAtc();
        if (atc != null) {
            stmt.bindString(58, atc);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(59, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(60, email);
        }
 
        String cardholderName = entity.getCardholderName();
        if (cardholderName != null) {
            stmt.bindString(61, cardholderName);
        }
 
        String fundingSource = entity.getFundingSource();
        if (fundingSource != null) {
            stmt.bindString(62, fundingSource);
        }
 
        String dccForeignAmount = entity.getDccForeignAmount();
        if (dccForeignAmount != null) {
            stmt.bindString(63, dccForeignAmount);
        }
 
        String dccExchangeRate = entity.getDccExchangeRate();
        if (dccExchangeRate != null) {
            stmt.bindString(64, dccExchangeRate);
        }
 
        String dccCurrencyCode = entity.getDccCurrencyCode();
        if (dccCurrencyCode != null) {
            stmt.bindString(65, dccCurrencyCode);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(66, qrCode);
        }
 
        String billPaymentRef1 = entity.getBillPaymentRef1();
        if (billPaymentRef1 != null) {
            stmt.bindString(67, billPaymentRef1);
        }
 
        String billPaymentRef2 = entity.getBillPaymentRef2();
        if (billPaymentRef2 != null) {
            stmt.bindString(68, billPaymentRef2);
        }
 
        String billPaymentRef3 = entity.getBillPaymentRef3();
        if (billPaymentRef3 != null) {
            stmt.bindString(69, billPaymentRef3);
        }
 
        String tmkKeyIndex = entity.getTmkKeyIndex();
        if (tmkKeyIndex != null) {
            stmt.bindString(70, tmkKeyIndex);
        }
 
        String dekKeyIndex = entity.getDekKeyIndex();
        if (dekKeyIndex != null) {
            stmt.bindString(71, dekKeyIndex);
        }
        stmt.bindLong(72, entity.getIsBSC() ? 1L: 0L);
 
        String amountCNY = entity.getAmountCNY();
        if (amountCNY != null) {
            stmt.bindString(73, amountCNY);
        }
 
        String exchangeRate = entity.getExchangeRate();
        if (exchangeRate != null) {
            stmt.bindString(74, exchangeRate);
        }
 
        String paymentId = entity.getPaymentId();
        if (paymentId != null) {
            stmt.bindString(75, paymentId);
        }
 
        String paymentChannel = entity.getPaymentChannel();
        if (paymentChannel != null) {
            stmt.bindString(76, paymentChannel);
        }
 
        String bankCode = entity.getBankCode();
        if (bankCode != null) {
            stmt.bindString(77, bankCode);
        }
        stmt.bindLong(78, entity.getPaymentPlan());
 
        String paymentTerm = entity.getPaymentTerm();
        if (paymentTerm != null) {
            stmt.bindString(79, paymentTerm);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(80, productCode);
        }
 
        String productSN = entity.getProductSN();
        if (productSN != null) {
            stmt.bindString(81, productSN);
        }
 
        String redeemQty = entity.getRedeemQty();
        if (redeemQty != null) {
            stmt.bindString(82, redeemQty);
        }
 
        String redeemType = entity.getRedeemType();
        if (redeemType != null) {
            stmt.bindString(83, redeemType);
        }
 
        String redeemAmt = entity.getRedeemAmt();
        if (redeemAmt != null) {
            stmt.bindString(84, redeemAmt);
        }
 
        String redeemPts = entity.getRedeemPts();
        if (redeemPts != null) {
            stmt.bindString(85, redeemPts);
        }
 
        String clubPoolId = entity.getClubPoolId();
        if (clubPoolId != null) {
            stmt.bindString(86, clubPoolId);
        }
 
        byte[] origField63 = entity.getOrigField63();
        if (origField63 != null) {
            stmt.bindBlob(87, origField63);
        }
 
        String billerId = entity.getBillerId();
        if (billerId != null) {
            stmt.bindString(88, billerId);
        }
 
        String consumerPan = entity.getConsumerPan();
        if (consumerPan != null) {
            stmt.bindString(89, consumerPan);
        }
 
        String merchantPan = entity.getMerchantPan();
        if (merchantPan != null) {
            stmt.bindString(90, merchantPan);
        }
 
        String transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindString(91, transactionId);
        }
 
        String qrCodeId = entity.getQrCodeId();
        if (qrCodeId != null) {
            stmt.bindString(92, qrCodeId);
        }
 
        String currencyCode = entity.getCurrencyCode();
        if (currencyCode != null) {
            stmt.bindString(93, currencyCode);
        }
 
        String sendingBankCode = entity.getSendingBankCode();
        if (sendingBankCode != null) {
            stmt.bindString(94, sendingBankCode);
        }
 
        String payeeProxyId = entity.getPayeeProxyId();
        if (payeeProxyId != null) {
            stmt.bindString(95, payeeProxyId);
        }
 
        String payeeProxyType = entity.getPayeeProxyType();
        if (payeeProxyType != null) {
            stmt.bindString(96, payeeProxyType);
        }
 
        String payeeAccountNumber = entity.getPayeeAccountNumber();
        if (payeeAccountNumber != null) {
            stmt.bindString(97, payeeAccountNumber);
        }
 
        String payerProxyId = entity.getPayerProxyId();
        if (payerProxyId != null) {
            stmt.bindString(98, payerProxyId);
        }
 
        String payerProxyType = entity.getPayerProxyType();
        if (payerProxyType != null) {
            stmt.bindString(99, payerProxyType);
        }
 
        String payerAccountNumber = entity.getPayerAccountNumber();
        if (payerAccountNumber != null) {
            stmt.bindString(100, payerAccountNumber);
        }
 
        String receivingBankCode = entity.getReceivingBankCode();
        if (receivingBankCode != null) {
            stmt.bindString(101, receivingBankCode);
        }
 
        String thaiQRTag = entity.getThaiQRTag();
        if (thaiQRTag != null) {
            stmt.bindString(102, thaiQRTag);
        }
        stmt.bindLong(103, entity.getIsPullSlip() ? 1L: 0L);
 
        String qrcsTraceNo = entity.getQrcsTraceNo();
        if (qrcsTraceNo != null) {
            stmt.bindString(104, qrcsTraceNo);
        }
 
        String saleType = entity.getSaleType();
        if (saleType != null) {
            stmt.bindString(105, saleType);
        }
 
        byte[] field63 = entity.getField63();
        if (field63 != null) {
            stmt.bindBlob(106, field63);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SettledTransData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTraceNo());
        stmt.bindLong(3, entity.getStanNo());
        stmt.bindString(4, entity.getTransType());
        stmt.bindString(5, transStateConverter.convertToDatabaseValue(entity.getTransState()));
 
        OfflineStatus offlineSendState = entity.getOfflineSendState();
        if (offlineSendState != null) {
            stmt.bindString(6, offlineSendStateConverter.convertToDatabaseValue(offlineSendState));
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
        stmt.bindLong(8, entity.getBatchNo());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
 
        String refNo = entity.getRefNo();
        if (refNo != null) {
            stmt.bindString(10, refNo);
        }
 
        byte[] signPath = entity.getSignPath();
        if (signPath != null) {
            stmt.bindBlob(11, signPath);
        }
        stmt.bindLong(12, entity.getIssuer_id());
        stmt.bindLong(13, entity.getAcquirer_id());
        stmt.bindString(14, reversalStatusConverter.convertToDatabaseValue(entity.getReversalStatus()));
        stmt.bindLong(15, entity.getOrigTransNo());
        stmt.bindLong(16, entity.getOrigStanNo());
 
        String origTransType = entity.getOrigTransType();
        if (origTransType != null) {
            stmt.bindString(17, origTransType);
        }
        stmt.bindLong(18, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(19, entity.getSendTimes());
 
        String procCode = entity.getProcCode();
        if (procCode != null) {
            stmt.bindString(20, procCode);
        }
 
        String tipAmount = entity.getTipAmount();
        if (tipAmount != null) {
            stmt.bindString(21, tipAmount);
        }
 
        Locale currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(22, currencyConverter.convertToDatabaseValue(currency));
        }
        stmt.bindLong(23, entity.getOrigBatchNo());
 
        String pan = entity.getPan();
        if (pan != null) {
            stmt.bindString(24, pan);
        }
 
        String origDateTime = entity.getOrigDateTime();
        if (origDateTime != null) {
            stmt.bindString(25, origDateTime);
        }
 
        String settleDateTime = entity.getSettleDateTime();
        if (settleDateTime != null) {
            stmt.bindString(26, settleDateTime);
        }
 
        String expDate = entity.getExpDate();
        if (expDate != null) {
            stmt.bindString(27, expDate);
        }
 
        EnterMode enterMode = entity.getEnterMode();
        if (enterMode != null) {
            stmt.bindString(28, enterModeConverter.convertToDatabaseValue(enterMode));
        }
 
        String nii = entity.getNii();
        if (nii != null) {
            stmt.bindString(29, nii);
        }
 
        String origRefNo = entity.getOrigRefNo();
        if (origRefNo != null) {
            stmt.bindString(30, origRefNo);
        }
 
        String authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindString(31, authCode);
        }
 
        String origAuthCode = entity.getOrigAuthCode();
        if (origAuthCode != null) {
            stmt.bindString(32, origAuthCode);
        }
 
        String issuerCode = entity.getIssuerCode();
        if (issuerCode != null) {
            stmt.bindString(33, issuerCode);
        }
 
        String acqCode = entity.getAcqCode();
        if (acqCode != null) {
            stmt.bindString(34, acqCode);
        }
        stmt.bindLong(35, entity.getHasPin() ? 1L: 0L);
 
        String track1 = entity.getTrack1();
        if (track1 != null) {
            stmt.bindString(36, track1);
        }
 
        String track2 = entity.getTrack2();
        if (track2 != null) {
            stmt.bindString(37, track2);
        }
 
        String track3 = entity.getTrack3();
        if (track3 != null) {
            stmt.bindString(38, track3);
        }
 
        String dupReason = entity.getDupReason();
        if (dupReason != null) {
            stmt.bindString(39, dupReason);
        }
 
        String reserved = entity.getReserved();
        if (reserved != null) {
            stmt.bindString(40, reserved);
        }
        stmt.bindLong(41, entity.getPinFree() ? 1L: 0L);
        stmt.bindLong(42, entity.getSignFree() ? 1L: 0L);
        stmt.bindLong(43, entity.getIsCDCVM() ? 1L: 0L);
        stmt.bindLong(44, entity.getIsOnlineTrans() ? 1L: 0L);
 
        byte[] signData = entity.getSignData();
        if (signData != null) {
            stmt.bindBlob(45, signData);
        }
 
        String emvResult = entity.getEmvResult();
        if (emvResult != null) {
            stmt.bindString(46, emvResult);
        }
 
        String cardSerialNo = entity.getCardSerialNo();
        if (cardSerialNo != null) {
            stmt.bindString(47, cardSerialNo);
        }
 
        String sendIccData = entity.getSendIccData();
        if (sendIccData != null) {
            stmt.bindString(48, sendIccData);
        }
 
        String dupIccData = entity.getDupIccData();
        if (dupIccData != null) {
            stmt.bindString(49, dupIccData);
        }
 
        String tc = entity.getTc();
        if (tc != null) {
            stmt.bindString(50, tc);
        }
 
        String arqc = entity.getArqc();
        if (arqc != null) {
            stmt.bindString(51, arqc);
        }
 
        String arpc = entity.getArpc();
        if (arpc != null) {
            stmt.bindString(52, arpc);
        }
 
        String tvr = entity.getTvr();
        if (tvr != null) {
            stmt.bindString(53, tvr);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(54, aid);
        }
 
        String emvAppLabel = entity.getEmvAppLabel();
        if (emvAppLabel != null) {
            stmt.bindString(55, emvAppLabel);
        }
 
        String emvAppName = entity.getEmvAppName();
        if (emvAppName != null) {
            stmt.bindString(56, emvAppName);
        }
 
        String tsi = entity.getTsi();
        if (tsi != null) {
            stmt.bindString(57, tsi);
        }
 
        String atc = entity.getAtc();
        if (atc != null) {
            stmt.bindString(58, atc);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(59, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(60, email);
        }
 
        String cardholderName = entity.getCardholderName();
        if (cardholderName != null) {
            stmt.bindString(61, cardholderName);
        }
 
        String fundingSource = entity.getFundingSource();
        if (fundingSource != null) {
            stmt.bindString(62, fundingSource);
        }
 
        String dccForeignAmount = entity.getDccForeignAmount();
        if (dccForeignAmount != null) {
            stmt.bindString(63, dccForeignAmount);
        }
 
        String dccExchangeRate = entity.getDccExchangeRate();
        if (dccExchangeRate != null) {
            stmt.bindString(64, dccExchangeRate);
        }
 
        String dccCurrencyCode = entity.getDccCurrencyCode();
        if (dccCurrencyCode != null) {
            stmt.bindString(65, dccCurrencyCode);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(66, qrCode);
        }
 
        String billPaymentRef1 = entity.getBillPaymentRef1();
        if (billPaymentRef1 != null) {
            stmt.bindString(67, billPaymentRef1);
        }
 
        String billPaymentRef2 = entity.getBillPaymentRef2();
        if (billPaymentRef2 != null) {
            stmt.bindString(68, billPaymentRef2);
        }
 
        String billPaymentRef3 = entity.getBillPaymentRef3();
        if (billPaymentRef3 != null) {
            stmt.bindString(69, billPaymentRef3);
        }
 
        String tmkKeyIndex = entity.getTmkKeyIndex();
        if (tmkKeyIndex != null) {
            stmt.bindString(70, tmkKeyIndex);
        }
 
        String dekKeyIndex = entity.getDekKeyIndex();
        if (dekKeyIndex != null) {
            stmt.bindString(71, dekKeyIndex);
        }
        stmt.bindLong(72, entity.getIsBSC() ? 1L: 0L);
 
        String amountCNY = entity.getAmountCNY();
        if (amountCNY != null) {
            stmt.bindString(73, amountCNY);
        }
 
        String exchangeRate = entity.getExchangeRate();
        if (exchangeRate != null) {
            stmt.bindString(74, exchangeRate);
        }
 
        String paymentId = entity.getPaymentId();
        if (paymentId != null) {
            stmt.bindString(75, paymentId);
        }
 
        String paymentChannel = entity.getPaymentChannel();
        if (paymentChannel != null) {
            stmt.bindString(76, paymentChannel);
        }
 
        String bankCode = entity.getBankCode();
        if (bankCode != null) {
            stmt.bindString(77, bankCode);
        }
        stmt.bindLong(78, entity.getPaymentPlan());
 
        String paymentTerm = entity.getPaymentTerm();
        if (paymentTerm != null) {
            stmt.bindString(79, paymentTerm);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(80, productCode);
        }
 
        String productSN = entity.getProductSN();
        if (productSN != null) {
            stmt.bindString(81, productSN);
        }
 
        String redeemQty = entity.getRedeemQty();
        if (redeemQty != null) {
            stmt.bindString(82, redeemQty);
        }
 
        String redeemType = entity.getRedeemType();
        if (redeemType != null) {
            stmt.bindString(83, redeemType);
        }
 
        String redeemAmt = entity.getRedeemAmt();
        if (redeemAmt != null) {
            stmt.bindString(84, redeemAmt);
        }
 
        String redeemPts = entity.getRedeemPts();
        if (redeemPts != null) {
            stmt.bindString(85, redeemPts);
        }
 
        String clubPoolId = entity.getClubPoolId();
        if (clubPoolId != null) {
            stmt.bindString(86, clubPoolId);
        }
 
        byte[] origField63 = entity.getOrigField63();
        if (origField63 != null) {
            stmt.bindBlob(87, origField63);
        }
 
        String billerId = entity.getBillerId();
        if (billerId != null) {
            stmt.bindString(88, billerId);
        }
 
        String consumerPan = entity.getConsumerPan();
        if (consumerPan != null) {
            stmt.bindString(89, consumerPan);
        }
 
        String merchantPan = entity.getMerchantPan();
        if (merchantPan != null) {
            stmt.bindString(90, merchantPan);
        }
 
        String transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindString(91, transactionId);
        }
 
        String qrCodeId = entity.getQrCodeId();
        if (qrCodeId != null) {
            stmt.bindString(92, qrCodeId);
        }
 
        String currencyCode = entity.getCurrencyCode();
        if (currencyCode != null) {
            stmt.bindString(93, currencyCode);
        }
 
        String sendingBankCode = entity.getSendingBankCode();
        if (sendingBankCode != null) {
            stmt.bindString(94, sendingBankCode);
        }
 
        String payeeProxyId = entity.getPayeeProxyId();
        if (payeeProxyId != null) {
            stmt.bindString(95, payeeProxyId);
        }
 
        String payeeProxyType = entity.getPayeeProxyType();
        if (payeeProxyType != null) {
            stmt.bindString(96, payeeProxyType);
        }
 
        String payeeAccountNumber = entity.getPayeeAccountNumber();
        if (payeeAccountNumber != null) {
            stmt.bindString(97, payeeAccountNumber);
        }
 
        String payerProxyId = entity.getPayerProxyId();
        if (payerProxyId != null) {
            stmt.bindString(98, payerProxyId);
        }
 
        String payerProxyType = entity.getPayerProxyType();
        if (payerProxyType != null) {
            stmt.bindString(99, payerProxyType);
        }
 
        String payerAccountNumber = entity.getPayerAccountNumber();
        if (payerAccountNumber != null) {
            stmt.bindString(100, payerAccountNumber);
        }
 
        String receivingBankCode = entity.getReceivingBankCode();
        if (receivingBankCode != null) {
            stmt.bindString(101, receivingBankCode);
        }
 
        String thaiQRTag = entity.getThaiQRTag();
        if (thaiQRTag != null) {
            stmt.bindString(102, thaiQRTag);
        }
        stmt.bindLong(103, entity.getIsPullSlip() ? 1L: 0L);
 
        String qrcsTraceNo = entity.getQrcsTraceNo();
        if (qrcsTraceNo != null) {
            stmt.bindString(104, qrcsTraceNo);
        }
 
        String saleType = entity.getSaleType();
        if (saleType != null) {
            stmt.bindString(105, saleType);
        }
 
        byte[] field63 = entity.getField63();
        if (field63 != null) {
            stmt.bindBlob(106, field63);
        }
    }

    @Override
    protected final void attachEntity(SettledTransData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SettledTransData readEntity(Cursor cursor, int offset) {
        SettledTransData entity = new SettledTransData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // traceNo
            cursor.getLong(offset + 2), // stanNo
            cursor.getString(offset + 3), // transType
            transStateConverter.convertToEntityProperty(cursor.getString(offset + 4)), // transState
            cursor.isNull(offset + 5) ? null : offlineSendStateConverter.convertToEntityProperty(cursor.getString(offset + 5)), // offlineSendState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // amount
            cursor.getLong(offset + 7), // batchNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // refNo
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // signPath
            cursor.getLong(offset + 11), // issuer_id
            cursor.getLong(offset + 12), // acquirer_id
            reversalStatusConverter.convertToEntityProperty(cursor.getString(offset + 13)), // reversalStatus
            cursor.getLong(offset + 14), // origTransNo
            cursor.getLong(offset + 15), // origStanNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // origTransType
            cursor.getShort(offset + 17) != 0, // isUpload
            cursor.getInt(offset + 18), // sendTimes
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // procCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tipAmount
            cursor.isNull(offset + 21) ? null : currencyConverter.convertToEntityProperty(cursor.getString(offset + 21)), // currency
            cursor.getLong(offset + 22), // origBatchNo
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // pan
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // origDateTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // settleDateTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // expDate
            cursor.isNull(offset + 27) ? null : enterModeConverter.convertToEntityProperty(cursor.getString(offset + 27)), // enterMode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // nii
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // origRefNo
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // authCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // origAuthCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // issuerCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // acqCode
            cursor.getShort(offset + 34) != 0, // hasPin
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // track1
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // track2
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // track3
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // dupReason
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // reserved
            cursor.getShort(offset + 40) != 0, // pinFree
            cursor.getShort(offset + 41) != 0, // signFree
            cursor.getShort(offset + 42) != 0, // isCDCVM
            cursor.getShort(offset + 43) != 0, // isOnlineTrans
            cursor.isNull(offset + 44) ? null : cursor.getBlob(offset + 44), // signData
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // emvResult
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // cardSerialNo
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // sendIccData
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // dupIccData
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // tc
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // arqc
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // arpc
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // tvr
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // aid
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // emvAppLabel
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // emvAppName
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // tsi
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // atc
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // phoneNum
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // email
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // cardholderName
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // fundingSource
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // dccForeignAmount
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // dccExchangeRate
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // dccCurrencyCode
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // qrCode
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // billPaymentRef1
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // billPaymentRef2
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // billPaymentRef3
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // tmkKeyIndex
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // dekKeyIndex
            cursor.getShort(offset + 71) != 0, // isBSC
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // amountCNY
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // exchangeRate
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // paymentId
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // paymentChannel
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // bankCode
            cursor.getInt(offset + 77), // paymentPlan
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // paymentTerm
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // productCode
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // productSN
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // redeemQty
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // redeemType
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // redeemAmt
            cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84), // redeemPts
            cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85), // clubPoolId
            cursor.isNull(offset + 86) ? null : cursor.getBlob(offset + 86), // origField63
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // billerId
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // consumerPan
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // merchantPan
            cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90), // transactionId
            cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91), // qrCodeId
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92), // currencyCode
            cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93), // sendingBankCode
            cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94), // payeeProxyId
            cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95), // payeeProxyType
            cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96), // payeeAccountNumber
            cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97), // payerProxyId
            cursor.isNull(offset + 98) ? null : cursor.getString(offset + 98), // payerProxyType
            cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99), // payerAccountNumber
            cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100), // receivingBankCode
            cursor.isNull(offset + 101) ? null : cursor.getString(offset + 101), // thaiQRTag
            cursor.getShort(offset + 102) != 0, // isPullSlip
            cursor.isNull(offset + 103) ? null : cursor.getString(offset + 103), // qrcsTraceNo
            cursor.isNull(offset + 104) ? null : cursor.getString(offset + 104), // saleType
            cursor.isNull(offset + 105) ? null : cursor.getBlob(offset + 105) // field63
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SettledTransData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTraceNo(cursor.getLong(offset + 1));
        entity.setStanNo(cursor.getLong(offset + 2));
        entity.setTransType(cursor.getString(offset + 3));
        entity.setTransState(transStateConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setOfflineSendState(cursor.isNull(offset + 5) ? null : offlineSendStateConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBatchNo(cursor.getLong(offset + 7));
        entity.setDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRefNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSignPath(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setIssuer_id(cursor.getLong(offset + 11));
        entity.setAcquirer_id(cursor.getLong(offset + 12));
        entity.setReversalStatus(reversalStatusConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setOrigTransNo(cursor.getLong(offset + 14));
        entity.setOrigStanNo(cursor.getLong(offset + 15));
        entity.setOrigTransType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsUpload(cursor.getShort(offset + 17) != 0);
        entity.setSendTimes(cursor.getInt(offset + 18));
        entity.setProcCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTipAmount(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCurrency(cursor.isNull(offset + 21) ? null : currencyConverter.convertToEntityProperty(cursor.getString(offset + 21)));
        entity.setOrigBatchNo(cursor.getLong(offset + 22));
        entity.setPan(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOrigDateTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSettleDateTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setExpDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEnterMode(cursor.isNull(offset + 27) ? null : enterModeConverter.convertToEntityProperty(cursor.getString(offset + 27)));
        entity.setNii(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setOrigRefNo(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAuthCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setOrigAuthCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setIssuerCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setAcqCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setHasPin(cursor.getShort(offset + 34) != 0);
        entity.setTrack1(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTrack2(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTrack3(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDupReason(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setReserved(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setPinFree(cursor.getShort(offset + 40) != 0);
        entity.setSignFree(cursor.getShort(offset + 41) != 0);
        entity.setIsCDCVM(cursor.getShort(offset + 42) != 0);
        entity.setIsOnlineTrans(cursor.getShort(offset + 43) != 0);
        entity.setSignData(cursor.isNull(offset + 44) ? null : cursor.getBlob(offset + 44));
        entity.setEmvResult(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setCardSerialNo(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setSendIccData(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setDupIccData(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setTc(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setArqc(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setArpc(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setTvr(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setAid(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setEmvAppLabel(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setEmvAppName(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setTsi(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setAtc(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setPhoneNum(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setEmail(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setCardholderName(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setFundingSource(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setDccForeignAmount(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setDccExchangeRate(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setDccCurrencyCode(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setQrCode(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setBillPaymentRef1(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setBillPaymentRef2(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setBillPaymentRef3(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setTmkKeyIndex(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setDekKeyIndex(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setIsBSC(cursor.getShort(offset + 71) != 0);
        entity.setAmountCNY(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setExchangeRate(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setPaymentId(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setPaymentChannel(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setBankCode(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setPaymentPlan(cursor.getInt(offset + 77));
        entity.setPaymentTerm(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setProductCode(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setProductSN(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setRedeemQty(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setRedeemType(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setRedeemAmt(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setRedeemPts(cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84));
        entity.setClubPoolId(cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85));
        entity.setOrigField63(cursor.isNull(offset + 86) ? null : cursor.getBlob(offset + 86));
        entity.setBillerId(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setConsumerPan(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setMerchantPan(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setTransactionId(cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90));
        entity.setQrCodeId(cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91));
        entity.setCurrencyCode(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
        entity.setSendingBankCode(cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93));
        entity.setPayeeProxyId(cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94));
        entity.setPayeeProxyType(cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95));
        entity.setPayeeAccountNumber(cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96));
        entity.setPayerProxyId(cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97));
        entity.setPayerProxyType(cursor.isNull(offset + 98) ? null : cursor.getString(offset + 98));
        entity.setPayerAccountNumber(cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99));
        entity.setReceivingBankCode(cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100));
        entity.setThaiQRTag(cursor.isNull(offset + 101) ? null : cursor.getString(offset + 101));
        entity.setIsPullSlip(cursor.getShort(offset + 102) != 0);
        entity.setQrcsTraceNo(cursor.isNull(offset + 103) ? null : cursor.getString(offset + 103));
        entity.setSaleType(cursor.isNull(offset + 104) ? null : cursor.getString(offset + 104));
        entity.setField63(cursor.isNull(offset + 105) ? null : cursor.getBlob(offset + 105));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SettledTransData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SettledTransData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SettledTransData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIssuerDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAcquirerDao().getAllColumns());
            builder.append(" FROM settled_trans_data T");
            builder.append(" LEFT JOIN issuer T0 ON T.\"ISSUER_ID\"=T0.\"issuer_id\"");
            builder.append(" LEFT JOIN acquirer T1 ON T.\"ACQUIRER_ID\"=T1.\"acquirer_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SettledTransData loadCurrentDeep(Cursor cursor, boolean lock) {
        SettledTransData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Issuer issuer = loadCurrentOther(daoSession.getIssuerDao(), cursor, offset);
         if(issuer != null) {
            entity.setIssuer(issuer);
        }
        offset += daoSession.getIssuerDao().getAllColumns().length;

        Acquirer acquirer = loadCurrentOther(daoSession.getAcquirerDao(), cursor, offset);
         if(acquirer != null) {
            entity.setAcquirer(acquirer);
        }

        return entity;    
    }

    public SettledTransData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SettledTransData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SettledTransData> list = new ArrayList<SettledTransData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SettledTransData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SettledTransData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
