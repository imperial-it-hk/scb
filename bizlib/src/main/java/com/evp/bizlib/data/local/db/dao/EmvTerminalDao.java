package com.evp.bizlib.data.local.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evp.bizlib.data.entity.EmvTerminal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "emv_terminal".
*/
public class EmvTerminalDao extends AbstractDao<EmvTerminal, Long> {

    public static final String TABLENAME = "emv_terminal";

    /**
     * Properties of entity EmvTerminal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property TerminalType = new Property(1, String.class, "terminalType", false, "TERMINAL_TYPE");
        public final static Property TerminalAdditionalCapabilities = new Property(2, String.class, "terminalAdditionalCapabilities", false, "TERMINAL_ADDITIONAL_CAPABILITIES");
        public final static Property MerchantCategoryCode = new Property(3, String.class, "merchantCategoryCode", false, "MERCHANT_CATEGORY_CODE");
    }


    public EmvTerminalDao(DaoConfig config) {
        super(config);
    }
    
    public EmvTerminalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"emv_terminal\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TERMINAL_TYPE\" TEXT NOT NULL ," + // 1: terminalType
                "\"TERMINAL_ADDITIONAL_CAPABILITIES\" TEXT NOT NULL ," + // 2: terminalAdditionalCapabilities
                "\"MERCHANT_CATEGORY_CODE\" TEXT NOT NULL );"); // 3: merchantCategoryCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"emv_terminal\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmvTerminal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTerminalType());
        stmt.bindString(3, entity.getTerminalAdditionalCapabilities());
        stmt.bindString(4, entity.getMerchantCategoryCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmvTerminal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTerminalType());
        stmt.bindString(3, entity.getTerminalAdditionalCapabilities());
        stmt.bindString(4, entity.getMerchantCategoryCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmvTerminal readEntity(Cursor cursor, int offset) {
        EmvTerminal entity = new EmvTerminal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // terminalType
            cursor.getString(offset + 2), // terminalAdditionalCapabilities
            cursor.getString(offset + 3) // merchantCategoryCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmvTerminal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTerminalType(cursor.getString(offset + 1));
        entity.setTerminalAdditionalCapabilities(cursor.getString(offset + 2));
        entity.setMerchantCategoryCode(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmvTerminal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmvTerminal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmvTerminal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
