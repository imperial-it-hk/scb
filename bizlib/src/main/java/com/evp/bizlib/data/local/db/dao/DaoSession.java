package com.evp.bizlib.data.local.db.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.evp.bizlib.data.entity.AcqIssuerRelation;
import com.evp.bizlib.data.entity.Acquirer;
import com.evp.bizlib.data.entity.CardBin;
import com.evp.bizlib.data.entity.CardBinBlack;
import com.evp.bizlib.data.entity.CardRange;
import com.evp.bizlib.data.entity.ClssTornLog;
import com.evp.bizlib.data.entity.EmvAid;
import com.evp.bizlib.data.entity.EmvCapk;
import com.evp.bizlib.data.entity.EmvTerminal;
import com.evp.bizlib.data.entity.Issuer;
import com.evp.bizlib.data.entity.SettledTransData;
import com.evp.bizlib.data.entity.TransData;
import com.evp.bizlib.data.entity.TransTotal;

import com.evp.bizlib.data.local.db.dao.AcqIssuerRelationDao;
import com.evp.bizlib.data.local.db.dao.AcquirerDao;
import com.evp.bizlib.data.local.db.dao.CardBinDao;
import com.evp.bizlib.data.local.db.dao.CardBinBlackDao;
import com.evp.bizlib.data.local.db.dao.CardRangeDao;
import com.evp.bizlib.data.local.db.dao.ClssTornLogDao;
import com.evp.bizlib.data.local.db.dao.EmvAidDao;
import com.evp.bizlib.data.local.db.dao.EmvCapkDao;
import com.evp.bizlib.data.local.db.dao.EmvTerminalDao;
import com.evp.bizlib.data.local.db.dao.IssuerDao;
import com.evp.bizlib.data.local.db.dao.SettledTransDataDao;
import com.evp.bizlib.data.local.db.dao.TransDataDao;
import com.evp.bizlib.data.local.db.dao.TransTotalDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig acqIssuerRelationDaoConfig;
    private final DaoConfig acquirerDaoConfig;
    private final DaoConfig cardBinDaoConfig;
    private final DaoConfig cardBinBlackDaoConfig;
    private final DaoConfig cardRangeDaoConfig;
    private final DaoConfig clssTornLogDaoConfig;
    private final DaoConfig emvAidDaoConfig;
    private final DaoConfig emvCapkDaoConfig;
    private final DaoConfig emvTerminalDaoConfig;
    private final DaoConfig issuerDaoConfig;
    private final DaoConfig settledTransDataDaoConfig;
    private final DaoConfig transDataDaoConfig;
    private final DaoConfig transTotalDaoConfig;

    private final AcqIssuerRelationDao acqIssuerRelationDao;
    private final AcquirerDao acquirerDao;
    private final CardBinDao cardBinDao;
    private final CardBinBlackDao cardBinBlackDao;
    private final CardRangeDao cardRangeDao;
    private final ClssTornLogDao clssTornLogDao;
    private final EmvAidDao emvAidDao;
    private final EmvCapkDao emvCapkDao;
    private final EmvTerminalDao emvTerminalDao;
    private final IssuerDao issuerDao;
    private final SettledTransDataDao settledTransDataDao;
    private final TransDataDao transDataDao;
    private final TransTotalDao transTotalDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        acqIssuerRelationDaoConfig = daoConfigMap.get(AcqIssuerRelationDao.class).clone();
        acqIssuerRelationDaoConfig.initIdentityScope(type);

        acquirerDaoConfig = daoConfigMap.get(AcquirerDao.class).clone();
        acquirerDaoConfig.initIdentityScope(type);

        cardBinDaoConfig = daoConfigMap.get(CardBinDao.class).clone();
        cardBinDaoConfig.initIdentityScope(type);

        cardBinBlackDaoConfig = daoConfigMap.get(CardBinBlackDao.class).clone();
        cardBinBlackDaoConfig.initIdentityScope(type);

        cardRangeDaoConfig = daoConfigMap.get(CardRangeDao.class).clone();
        cardRangeDaoConfig.initIdentityScope(type);

        clssTornLogDaoConfig = daoConfigMap.get(ClssTornLogDao.class).clone();
        clssTornLogDaoConfig.initIdentityScope(type);

        emvAidDaoConfig = daoConfigMap.get(EmvAidDao.class).clone();
        emvAidDaoConfig.initIdentityScope(type);

        emvCapkDaoConfig = daoConfigMap.get(EmvCapkDao.class).clone();
        emvCapkDaoConfig.initIdentityScope(type);

        emvTerminalDaoConfig = daoConfigMap.get(EmvTerminalDao.class).clone();
        emvTerminalDaoConfig.initIdentityScope(type);

        issuerDaoConfig = daoConfigMap.get(IssuerDao.class).clone();
        issuerDaoConfig.initIdentityScope(type);

        settledTransDataDaoConfig = daoConfigMap.get(SettledTransDataDao.class).clone();
        settledTransDataDaoConfig.initIdentityScope(type);

        transDataDaoConfig = daoConfigMap.get(TransDataDao.class).clone();
        transDataDaoConfig.initIdentityScope(type);

        transTotalDaoConfig = daoConfigMap.get(TransTotalDao.class).clone();
        transTotalDaoConfig.initIdentityScope(type);

        acqIssuerRelationDao = new AcqIssuerRelationDao(acqIssuerRelationDaoConfig, this);
        acquirerDao = new AcquirerDao(acquirerDaoConfig, this);
        cardBinDao = new CardBinDao(cardBinDaoConfig, this);
        cardBinBlackDao = new CardBinBlackDao(cardBinBlackDaoConfig, this);
        cardRangeDao = new CardRangeDao(cardRangeDaoConfig, this);
        clssTornLogDao = new ClssTornLogDao(clssTornLogDaoConfig, this);
        emvAidDao = new EmvAidDao(emvAidDaoConfig, this);
        emvCapkDao = new EmvCapkDao(emvCapkDaoConfig, this);
        emvTerminalDao = new EmvTerminalDao(emvTerminalDaoConfig, this);
        issuerDao = new IssuerDao(issuerDaoConfig, this);
        settledTransDataDao = new SettledTransDataDao(settledTransDataDaoConfig, this);
        transDataDao = new TransDataDao(transDataDaoConfig, this);
        transTotalDao = new TransTotalDao(transTotalDaoConfig, this);

        registerDao(AcqIssuerRelation.class, acqIssuerRelationDao);
        registerDao(Acquirer.class, acquirerDao);
        registerDao(CardBin.class, cardBinDao);
        registerDao(CardBinBlack.class, cardBinBlackDao);
        registerDao(CardRange.class, cardRangeDao);
        registerDao(ClssTornLog.class, clssTornLogDao);
        registerDao(EmvAid.class, emvAidDao);
        registerDao(EmvCapk.class, emvCapkDao);
        registerDao(EmvTerminal.class, emvTerminalDao);
        registerDao(Issuer.class, issuerDao);
        registerDao(SettledTransData.class, settledTransDataDao);
        registerDao(TransData.class, transDataDao);
        registerDao(TransTotal.class, transTotalDao);
    }
    
    public void clear() {
        acqIssuerRelationDaoConfig.clearIdentityScope();
        acquirerDaoConfig.clearIdentityScope();
        cardBinDaoConfig.clearIdentityScope();
        cardBinBlackDaoConfig.clearIdentityScope();
        cardRangeDaoConfig.clearIdentityScope();
        clssTornLogDaoConfig.clearIdentityScope();
        emvAidDaoConfig.clearIdentityScope();
        emvCapkDaoConfig.clearIdentityScope();
        emvTerminalDaoConfig.clearIdentityScope();
        issuerDaoConfig.clearIdentityScope();
        settledTransDataDaoConfig.clearIdentityScope();
        transDataDaoConfig.clearIdentityScope();
        transTotalDaoConfig.clearIdentityScope();
    }

    public AcqIssuerRelationDao getAcqIssuerRelationDao() {
        return acqIssuerRelationDao;
    }

    public AcquirerDao getAcquirerDao() {
        return acquirerDao;
    }

    public CardBinDao getCardBinDao() {
        return cardBinDao;
    }

    public CardBinBlackDao getCardBinBlackDao() {
        return cardBinBlackDao;
    }

    public CardRangeDao getCardRangeDao() {
        return cardRangeDao;
    }

    public ClssTornLogDao getClssTornLogDao() {
        return clssTornLogDao;
    }

    public EmvAidDao getEmvAidDao() {
        return emvAidDao;
    }

    public EmvCapkDao getEmvCapkDao() {
        return emvCapkDao;
    }

    public EmvTerminalDao getEmvTerminalDao() {
        return emvTerminalDao;
    }

    public IssuerDao getIssuerDao() {
        return issuerDao;
    }

    public SettledTransDataDao getSettledTransDataDao() {
        return settledTransDataDao;
    }

    public TransDataDao getTransDataDao() {
        return transDataDao;
    }

    public TransTotalDao getTransTotalDao() {
        return transTotalDao;
    }

}
