apply plugin: 'com.android.application'
apply plugin: 'WMRouter'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-parcelize'

def static releaseTime() {
    return new Date().format("yyyyMMddHH", TimeZone.getTimeZone("GMT+07"))
}

def loadSigningConfigs() {
    def Properties props = new Properties()
    def propFile = file('../signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('RELEASE_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
                props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_FILE'])
            android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
        } else {
            android.buildTypes.release.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }
}

import org.apache.commons.configuration2.PropertiesConfiguration
import org.apache.commons.configuration2.io.FileHandler

task modifySonarConfig(dependsOn: "build") {
    println "========modifySonarConfig execute========="
    def versionPropsFile = file('../sonar-project.properties')

    def config = new PropertiesConfiguration()
    def fileHandler = new FileHandler(config)
    fileHandler.file = versionPropsFile
    fileHandler.load()

    config.setProperty('sonar.projectKey',SONAR_PROJECT_KEY)
    config.setProperty('sonar.projectName',SONAR_PROJECT_NAME)
    config.setProperty('sonar.projectVersion',SONAR_PROJECT_VERSION)
    config.setProperty('app.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('eemv.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('poslib.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('bizlib.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('commonlib.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('appstore.sonar.java.binaries',SONAR_BUILD_CLASS_PATH)

    config.setProperty('sonar.sourceEncoding',SONAR_SOURCEENCODING)
    config.setProperty('sonar.exclusions',SONAR_EXCLUSIONS)

    fileHandler.save()
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName + "-" + releaseTime()
        multiDexEnabled true
        multiDexKeepProguard file('multiDexKeep.pro')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi'
        }
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
        }
    }

    lintOptions {
        abortOnError false
    }

    viewBinding {
        enabled = true
    }

    //签名
    signingConfigs {
        debug {
        }
        release {
        }
    }

    buildTypes {
        autoTest{
            debuggable true
            buildConfigField('boolean','RELEASE','false')
            buildConfigField('boolean','needRemoveCard','false')
            manifestPlaceholders = [PAXSTORE_APP_KEY:"FBTSK4PPZSG6UJP1GY9A",PAXSTORE_APP_SECRET:"VT8MKKR4FQWBONHEF9PNFHT7CD5C0IUM871P8WL9"]
            versionNameSuffix "-autoTest"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            loadSigningConfigs()
            //signingConfig signingConfigs.release
        }
        debug {
            buildConfigField('boolean','RELEASE','false')
            buildConfigField('boolean','needRemoveCard','true')
            manifestPlaceholders = [PAXSTORE_APP_KEY:"FBTSK4PPZSG6UJP1GY9A",PAXSTORE_APP_SECRET:"VT8MKKR4FQWBONHEF9PNFHT7CD5C0IUM871P8WL9"]
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }
        release {
            buildConfigField('boolean','RELEASE','true')
            buildConfigField('boolean','needRemoveCard','true')
            manifestPlaceholders = [PAXSTORE_APP_KEY:"FBTSK4PPZSG6UJP1GY9A",PAXSTORE_APP_SECRET:"VT8MKKR4FQWBONHEF9PNFHT7CD5C0IUM871P8WL9"]
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            loadSigningConfigs()
            //签名
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName != null && outputFile.name.endsWith('.apk')) {
                def type = ""
                if (variant.buildType.name == 'debug') {
                    type = "-debug"
                } else if(variant.buildType.name == 'release'){
                    type = "-release"
                } else if(variant.buildType.name == 'autoTest'){
                    type = "-autoTest"
                }
                def fileName = "EVPSCB-${defaultConfig.versionName}${type}.apk"
                outputFileName = fileName
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    flatDir {
        dirs '../poslib/libs', 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation(name: 'expandablerecyclerview-release', ext: 'aar')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':bizlib')
    implementation project(':eemv')
    implementation project(':appstore')
    implementation project(':printer')
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1'

    implementation "androidx.legacy:legacy-support-v4:$rootProject.androidxSupportV4"
    implementation "com.google.android.material:material:$rootProject.material"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:$rootProject.rxpermissions"
    implementation "com.github.bumptech.glide:glide:$rootProject.glide"
    implementation "org.greenrobot:eventbus:$rootProject.eventbus"

    implementation "com.shizhefei:GuideHelper:$rootProject.guideHelper"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'org.apache.httpcomponents:httpcore:4.4.1'
    implementation 'com.google.code.gson:gson:2.8.9'

    testImplementation "junit:junit:$rootProject.junit"
    testImplementation "org.mockito:mockito-all:$rootProject.mockito"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.hamcrest"
    testImplementation "androidx.arch.core:core-testing:$rootProject.coreTesting"
    androidTestImplementation "androidx.test:runner:$rootProject.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso"
    androidTestImplementation "junit:junit:$rootProject.junit"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanary"

    implementation "androidx.paging:paging-runtime:$androidxPaging"

    compileOnly 'org.jetbrains:annotations:+@jar'
}
